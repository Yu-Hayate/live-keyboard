{"entries":[{"timestamp":1743112514639,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2710,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":561,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":76,"length1":53,"diffs":[[1,"        \"device\": \"*\"\n"]]},{"start1":183,"length1":54,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":212,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"MoreBrowserEvents.ts","value":""}]},{"timestamp":1743113148710,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":2427,"diffs":[[1,""]]}]}]},{"timestamp":1743113194946,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"browserEvents_mouseButton_isPressed\"><field name=\"this\">browserEvents.MouseLeft</field></block></value><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"browserEvents_key_isPressed\"><field name=\"this\">browserEvents.A</field></block></value><next><block type=\"browserEvents_key_pauseUntil\"><field name=\"this\">browserEvents.A</field><field name=\"event\">browserEvents.KeyEvent.Pressed</field><next><block type=\"browserEvents_mouseButton_pauseUntil\"><field name=\"this\">browserEvents.MouseLeft</field><field name=\"event\">browserEvents.KeyEvent.Pressed</field></block></next></block></next></block></statement></block><block type=\"browserEvents_onMouseMove\" x=\"144\" y=\"55\"><value name=\"HANDLER_DRAG_PARAM_x\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">x</field></block></value><value name=\"HANDLER_DRAG_PARAM_y\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">y</field></block></value></block><block type=\"browserEvents_mouseButton_onEvent\" x=\"161\" y=\"178\"><field name=\"this\">browserEvents.MouseLeft</field><field name=\"event\">browserEvents.MouseButtonEvent.Pressed</field><value name=\"HANDLER_DRAG_PARAM_x\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">x</field></block></value><value name=\"HANDLER_DRAG_PARAM_y\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">y</field></block></value></block><block type=\"browserEvents_onWheel\" x=\"104\" y=\"502\"><value name=\"HANDLER_DRAG_PARAM_dx\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">dx</field></block></value><value name=\"HANDLER_DRAG_PARAM_dy\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">dy</field></block></value><value name=\"HANDLER_DRAG_PARAM_dz\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">dz</field></block></value></block><block type=\"browserEvents_onEvent\" x=\"67\" y=\"648\"><field name=\"event\">browserEvents.Event.PointerDown</field></block><block type=\"browserEvents_key_onEvent\" x=\"127\" y=\"803\"><field name=\"this\">browserEvents.A</field><field name=\"event\">browserEvents.KeyEvent.Pressed</field></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"browserEvents.A.onEvent(browserEvents.KeyEvent.Pressed, function () {\n\t\n})\nbrowserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Pressed, function (x, y) {\n\t\n})\nbrowserEvents.onWheel(function (dx, dy, dz) {\n\t\n})\nbrowserEvents.onEvent(browserEvents.Event.PointerDown, function () {\n\t\n})\nbrowserEvents.onMouseMove(function (x, y) {\n\t\n})\nif (browserEvents.MouseLeft.isPressed()) {\n\t\n} else if (browserEvents.A.isPressed()) {\n\t\n}\nbrowserEvents.A.pauseUntil(browserEvents.KeyEvent.Pressed)\nbrowserEvents.MouseLeft.pauseUntil(browserEvents.KeyEvent.Pressed)\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":1924,"diffs":[[1,"namespace KeyLogger {\n    // Global map to track key states\n    const keyStates: { [key: string]: boolean } = {}\n\n    // Comprehensive key logging function\n    function logKeyPress(key: string) {\n        console.log(`Key Pressed: ${key}`)\n        keyStates[key] = true\n    }\n\n    // Browser-based event listeners\n    browserEvents.onEvent(browserEvents.Event.KeyDown, function (key: string) {\n        logKeyPress(`BrowserEvent (KeyDown): ${key}`)\n    })\n\n    browserEvents.onEvent(browserEvents.Event.KeyUp, function (key: string) {\n        keyStates[key] = false\n    })\n\n    // Additional key event handlers for multiple event types\n    browserEvents.onEvent(browserEvents.Event.KeyPressed, function (key: string) {\n        logKeyPress(`BrowserEvent (KeyPressed): ${key}`)\n    })\n\n    // Capture all individual key events\n    Object.keys(browserEvents).forEach(eventKey => {\n        if (eventKey.startsWith('key')) {\n            try {\n                browserEvents[eventKey].onEvent(browserEvents.KeyEvent.Pressed, function () {\n                    logKeyPress(`Specific Key Event: ${eventKey}`)\n                })\n            } catch (e) {\n                console.log(`Could not attach event to ${eventKey}`)\n            }\n        }\n    })\n\n    // Keyboard matrix scanning (simulated brute force approach)\n    game.onUpdate(function () {\n        // Attempt to log keys through multiple methods\n        for (let i = 0; i < 256; i++) {\n            try {\n                // Attempt to check if key is pressed through various methods\n                if (browserEvents[`key${i}`] && browserEvents[`key${i}`].isPressed()) {\n                    logKeyPress(`Brute Force Key Scan: key${i}`)\n                }\n            } catch { }\n        }\n\n        // Additional brute force key detection\n        try {\n            const allKeys = Object.keys(browserEvents).filter(k => k.startsWith('key'))\n            allKeys.forEach(key => {\n                try {\n                    if (browserEvents[key].isPressed()) {\n                        logKeyPress(`Comprehensive Scan: ${key}`)\n                    }\n                } catch { }\n            })\n        } catch { }\n    })\n\n    // Keyboard event simulation (additional capture method)\n    control.onEvent(control.EventKind.KeyDown, function (key: number) {\n        logKeyPress(`Control Event KeyDown: ${key}`)\n    })\n\n    // Initialize logging\n    console.log(\"Key Logger Initialized\")\n"]]}]}]},{"timestamp":1743113954261,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":85,"length1":46,"diffs":[[1,""]]},{"start1":87,"length1":270,"diffs":[[1,""]]},{"start1":1409,"length1":65,"diffs":[[1,"            if (key.isPressed()) {\r\n"]]},{"start1":1777,"length1":41,"diffs":[[1,""]]},{"start1":1779,"length1":294,"diffs":[[1,"                // Optional: Display the current text\r\n                console.log(`Typing: ${currentText}`)\r\n"]]}]}]},{"timestamp":1743113969090,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":27,"length1":109,"diffs":[[1,"    let currentText = \"\"\r\n    let isShiftPressed = false\r\n    let lastPressedKey: number | null = null\r\n"]]},{"start1":133,"length1":269,"diffs":[[1,"    // Keybinds display\r\n    game.showDialog(`\r\n    Typing Simulator Keybinds:\r\n    -------------------------\r\n    Letters: A-Z\r\n    Numbers: 0-9\r\n    Special: Space, ;, ', ,, ., /\r\n    \r\n    Shift: Uppercase Letters\r\n    \r\n    Press any key to start typing!\r\n    `)\r\n"]]},{"start1":403,"length1":74,"diffs":[[1,"    // Predefined keys for typing\r\n    const typingKeys = [\r\n        browserEvents.A, browserEvents.B, browserEvents.C, browserEvents.D, browserEvents.E,\r\n        browserEvents.F, browserEvents.G, browserEvents.H, browserEvents.I, browserEvents.J,\r\n        browserEvents.K, browserEvents.L, browserEvents.M, browserEvents.N, browserEvents.O,\r\n        browserEvents.P, browserEvents.Q, browserEvents.R, browserEvents.S, browserEvents.T,\r\n        browserEvents.U, browserEvents.V, browserEvents.W, browserEvents.X, browserEvents.Y,\r\n        browserEvents.Z,\r\n        browserEvents.Zero, browserEvents.One, browserEvents.Two, browserEvents.Three,\r\n        browserEvents.Four, browserEvents.Five, browserEvents.Six, browserEvents.Seven,\r\n        browserEvents.Eight, browserEvents.Nine,\r\n        browserEvents.Space, browserEvents.SemiColon, browserEvents.Apostrophe,\r\n        browserEvents.Comma, browserEvents.Period, browserEvents.ForwardSlash\r\n    ]\r\n"]]},{"start1":1356,"length1":354,"diffs":[[1,"    // Track Shift state\r\n    browserEvents.Shift.onEvent(browserEvents.KeyEvent.Pressed, function () {\r\n        isShiftPressed = true\r\n    })\r\n"]]},{"start1":1502,"length1":1057,"diffs":[[1,"    browserEvents.Shift.onEvent(browserEvents.KeyEvent.Released, function () {\r\n        isShiftPressed = false\r\n    })\r\n"]]},{"start1":1624,"length1":88,"diffs":[[1,"    // Optimized typing logic\r\n    game.onUpdate(function () {\r\n        typingKeys.forEach(key => {\r\n            if (key.isPressed() && key.id !== lastPressedKey) {\r\n                let keyChar = browserEvents.keyToString(key.id)\r\n"]]},{"start1":1857,"length1":2037,"diffs":[[1,"                // Convert to uppercase if Shift is pressed\r\n                if (isShiftPressed) {\r\n                    keyChar = keyChar.toUpperCase()\r\n"]]},{"start1":2029,"length1":15,"diffs":[[1,""]]},{"start1":2031,"length1":0,"diffs":[[1,"                // Only update with the latest key\r\n                currentText = keyChar\r\n                lastPressedKey = key.id\r\n"]]},{"start1":2165,"length1":4075,"diffs":[[1,"                // Display the current text once\r\n                game.showDialog(`\r\n                Typing Simulator\r\n                ----------------\r\n                Current Text: ${currentText}\r\n                \r\n                Shift: ${isShiftPressed ? 'ON' : 'OFF'}\r\n                `)\r\n            }\r\n        })\r\n    })\r\n"]]}]}]},{"timestamp":1743114549138,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":50,"diffs":[[1,"        \"MoreBrowserEvents.ts\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":138,"length1":38,"diffs":[[1,"    class SmartTypeRecorder {\r\n"]]},{"start1":407,"length1":327,"diffs":[[1,""]]},{"start1":409,"length1":311,"diffs":[[1,"        constructor() {\r\n            this.setupKeyListeners()\r\n"]]},{"start1":485,"length1":27,"diffs":[[1,"        private setupKeyListeners() {\r\n            // Shift handling\r\n            browserEvents.Shift.onEvent(browserEvents.KeyEvent.Pressed, () => {\r\n                this.isShiftPressed = true\r\n            })\r\n            browserEvents.Shift.onEvent(browserEvents.KeyEvent.Released, () => {\r\n                this.isShiftPressed = false\r\n            })\r\n"]]},{"start1":841,"length1":294,"diffs":[[1,"            // Special key handling\r\n            const typingKeys = [\r\n                browserEvents.A, browserEvents.B, browserEvents.C, browserEvents.D, browserEvents.E,\r\n                browserEvents.F, browserEvents.G, browserEvents.H, browserEvents.I, browserEvents.J,\r\n                browserEvents.K, browserEvents.L, browserEvents.M, browserEvents.N, browserEvents.O,\r\n                browserEvents.P, browserEvents.Q, browserEvents.R, browserEvents.S, browserEvents.T,\r\n                browserEvents.U, browserEvents.V, browserEvents.W, browserEvents.X, browserEvents.Y,\r\n                browserEvents.Z,\r\n                browserEvents.Zero, browserEvents.One, browserEvents.Two, browserEvents.Three,\r\n                browserEvents.Four, browserEvents.Five, browserEvents.Six, browserEvents.Seven,\r\n                browserEvents.Eight, browserEvents.Nine,\r\n                browserEvents.Space, browserEvents.SemiColon, browserEvents.Apostrophe,\r\n                browserEvents.Comma, browserEvents.Period, browserEvents.ForwardSlash\r\n            ]\r\n\r\n            game.onUpdate(function () {\r\n                if (!this.isRecording) return\r\n\r\n                typingKeys.forEach(key => {\r\n                    if (key.isPressed()) {\r\n                        let keyChar = browserEvents.keyToString(key.id)\r\n\r\n                        // Handle special cases\r\n                        if (key === browserEvents.Space && this.mode === RecordingMode.SingleWord) {\r\n                            return // Stop recording on space in single word mode\r\n                        }\r\n\r\n                        // Apply shift\r\n                        if (this.isShiftPressed) {\r\n                            keyChar = keyChar.toUpperCase()\r\n                        }\r\n\r\n                        // Add to text with mode constraints\r\n                        if (this.mode !== RecordingMode.LimitedCharacters ||\r\n                            this.text.length < this.characterLimit) {\r\n                            this.text += keyChar\r\n                        }\r\n\r\n                        // Display current text\r\n                        console.log(`\r\n                        Smart Type Recorder\r\n                        -------------------\r\n                        Text: ${this.text}\r\n                        Mode: ${RecordingMode[this.mode]}\r\n                        Shift: ${this.isShiftPressed ? 'ON' : 'OFF'}\r\n                        `)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        // Start recording with optional mode\r\n        startRecording(mode: RecordingMode = RecordingMode.Continuous, limit: number = 0) {\r\n"]]},{"start1":3616,"length1":41,"diffs":[[1,""]]},{"start1":3690,"length1":388,"diffs":[[1,"        // Stop recording with optional specific stop key\r\n        stopRecording(specificStopKey?: browserEvents.Key) {\r\n            if (specificStopKey) {\r\n                // Wait for specific key to stop\r\n                while (!browserEvents[browserEvents.keyToString(specificStopKey)].isPressed()) {\r\n                    pause(100)\r\n                }\r\n"]]},{"start1":4063,"length1":80,"diffs":[[1,""]]},{"start1":4065,"length1":187,"diffs":[[1,""]]},{"start1":4067,"length1":897,"diffs":[[1,"            return this.text\r\n"]]},{"start1":4110,"length1":745,"diffs":[[1,"        // Get current recorded text\r\n"]]},{"start1":4218,"length1":344,"diffs":[[1,"    }\r\n    export function keyToString(key: Key) {\r\n        switch (key) {\r\n            case Key.Q:\r\n                return \"Q\";\r\n            case Key.W:\r\n                return \"W\";\r\n            case Key.E:\r\n                return \"E\";\r\n            case Key.R:\r\n                return \"R\";\r\n            case Key.T:\r\n                return \"T\";\r\n            case Key.Y:\r\n                return \"Y\";\r\n            case Key.U:\r\n                return \"U\";\r\n            case Key.I:\r\n                return \"I\";\r\n            case Key.O:\r\n                return \"O\";\r\n            case Key.P:\r\n                return \"P\";\r\n            case Key.OpenBracket:\r\n                return \"[\";\r\n            case Key.CloseBracket:\r\n                return \"]\";\r\n            case Key.BackSlash:\r\n                return \"\\\\\";\r\n            case Key.A:\r\n                return \"A\";\r\n            case Key.S:\r\n                return \"S\";\r\n            case Key.D:\r\n                return \"D\";\r\n            case Key.F:\r\n                return \"F\";\r\n            case Key.G:\r\n                return \"G\";\r\n            case Key.H:\r\n                return \"H\";\r\n            case Key.Space:\r\n                return \" \";\r\n            case Key.PageUp:\r\n                return \"PageUp\";\r\n            case Key.J:\r\n                return \"J\";\r\n            case Key.K:\r\n                return \"K\";\r\n            case Key.L:\r\n                return \"L\";\r\n            case Key.SemiColon:\r\n                return \";\";\r\n            case Key.Apostrophe:\r\n                return \"'\";\r\n            case Key.Z:\r\n                return \"Z\";\r\n            case Key.X:\r\n                return \"X\";\r\n            case Key.C:\r\n                return \"C\";\r\n            case Key.V:\r\n                return \"V\";\r\n            case Key.B:\r\n                return \"B\";\r\n            case Key.N:\r\n                return \"N\";\r\n            case Key.M:\r\n                return \"M\";\r\n            case Key.Comma:\r\n                return \",\";\r\n            case Key.Period:\r\n                return \".\";\r\n            case Key.ForwardSlash:\r\n                return \"/\";\r\n            case Key.Shift:\r\n                return \"Shift\";\r\n            case Key.Enter:\r\n                return \"Enter\";\r\n            case Key.CapsLock:\r\n                return \"CapsLock\";\r\n            case Key.Tab:\r\n                return \"Tab\";\r\n            case Key.Control:\r\n                return \"Control\";\r\n            case Key.Meta:\r\n                return \"Meta\";\r\n            case Key.Alt:\r\n                return \"Alt\";\r\n            case Key.ArrowUp:\r\n                return \"ArrowUp\";\r\n            case Key.ArrowDown:\r\n                return \"ArrowDown\";\r\n            case Key.ArrowLeft:\r\n                return \"ArrowLeft\";\r\n            case Key.ArrowRight:\r\n                return \"ArrowRight\";\r\n            case Key.PageDown:\r\n                return \"PageDown\";\r\n            case Key.End:\r\n                return \"End\";\r\n            case Key.Home:\r\n                return \"Home\";\r\n            case Key.Zero:\r\n                return \"0\";\r\n            case Key.One:\r\n                return \"1\";\r\n            case Key.Two:\r\n                return \"2\";\r\n            case Key.Three:\r\n                return \"3\";\r\n            case Key.Four:\r\n                return \"4\";\r\n            case Key.Five:\r\n                return \"5\";\r\n            case Key.Six:\r\n                return \"6\";\r\n            case Key.Seven:\r\n                return \"7\";\r\n            case Key.Eight:\r\n                return \"8\";\r\n            case Key.Nine:\r\n                return \"9\";\r\n            case Key.BackTick:\r\n                return \"`\";\r\n            case Key.Hyphen:\r\n                return \"-\";\r\n            case Key.Equals:\r\n                return \"=\";\r\n            default:\r\n                return \"Unknown\";\r\n"]]},{"start1":8034,"length1":170,"diffs":[[1,""]]},{"start1":8043,"length1":46,"diffs":[[1,"    // Create an instance for easy use\r\n"]]},{"start1":8140,"length1":1257,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":""}]},{"timestamp":1743115138573,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":2166,"length1":141,"diffs":[[1,"            if (!this.typingKeys.includes(key)) {\r\n                console.warn(`Invalid key: ${key}`)\r\n                return false\r\n"]]},{"start1":4253,"length1":20,"diffs":[[1,"Mode: ${RecordingMode[this.mode]}\r\n"]]},{"start1":4682,"length1":0,"diffs":[[1,"\r\n// Example usage\r\nfunction exampleUsage() {\r\n    const { typeRecorder, RecordingMode } = TypeSimulator\r\n\r\n    // Start recording in continuous mode\r\n    typeRecorder.startRecording()\r\n\r\n    // Simulate typing\r\n    typeRecorder.typeCharacter('h')\r\n    typeRecorder.typeCharacter('e')\r\n    typeRecorder.typeCharacter('l')\r\n    typeRecorder.typeCharacter('l')\r\n    typeRecorder.typeCharacter('o')\r\n\r\n    // Toggle shift and type capital letters\r\n    typeRecorder.setShift(true)\r\n    typeRecorder.typeCharacter('w')\r\n    typeRecorder.typeCharacter('o')\r\n    typeRecorder.typeCharacter('r')\r\n    typeRecorder.typeCharacter('l')\r\n    typeRecorder.typeCharacter('d')\r\n    typeRecorder.setShift(false)\r\n\r\n    // Stop recording and get text\r\n    const recordedText = typeRecorder.stopRecording()\r\n    console.log(\"Recorded text:\" + recordedText)\r\n\r\n    // Start recording in single word mode\r\n    typeRecorder.startRecording(RecordingMode.SingleWord)\r\n    typeRecorder.typeCharacter('t')\r\n    typeRecorder.typeCharacter('e')\r\n    typeRecorder.typeCharacter('s')\r\n    typeRecorder.typeCharacter('t')\r\n\r\n    // This will fail because we're in single word mode\r\n    const spaceAdded = typeRecorder.typeCharacter(' ')\r\n    console.log(\"Space added:\" + spaceAdded)\r\n}"]]}]}]},{"timestamp":1743115268234,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"namespace TypeSimulator {\r\n    export enum RecordingMode {\r\n        Continuous,\r\n        SingleWord,\r\n        LimitedCharacters\r\n    }\r\n\r\n    export class SmartTypeRecorder {\r\n        private text: string = \"\"\r\n        private isShiftPressed: boolean = false\r\n        private isRecording: boolean = false\r\n        private mode: RecordingMode = RecordingMode.Continuous\r\n        private characterLimit: number = 0\r\n        private typingKeys: string[] = [\r\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\r\n            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\r\n            'u', 'v', 'w', 'x', 'y', 'z',\r\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n            ' ', ';', \"'\", ',', '.', '/'\r\n        ]\r\n\r\n        // Mapping for special characters that require shift\r\n        private shiftCharMap: { [key: string]: string } = {\r\n            '1': '!', '2': '@', '3': '#', '4': '$', '5': '%',\r\n            '6': '^', '7': '&', '8': '*', '9': '(', '0': ')',\r\n            ';': ':', \"'\": '\"', ',': '<', '.': '>', '/': '?'\r\n        }\r\n\r\n        constructor() { }\r\n\r\n        /**\r\n         * Starts recording text input\r\n         * @param mode Recording mode (default: Continuous)\r\n         * @param limit Character limit for LimitedCharacters mode\r\n         */\r\n        startRecording(mode: RecordingMode = RecordingMode.Continuous, limit: number = 0): void {\r\n            this.isRecording = true\r\n            this.text = \"\"\r\n            this.mode = mode\r\n            this.characterLimit = limit\r\n            this.isShiftPressed = false\r\n            console.log(\"Recording started. Begin typing!\")\r\n        }\r\n\r\n        /**\r\n         * Simulates typing a character\r\n         * @param key The key to type\r\n         * @returns boolean indicating if the character was successfully added\r\n         */\r\n        typeCharacter(key: string): boolean {\r\n            if (!this.isRecording) {\r\n                console.warn(\"Not currently recording. Call startRecording() first.\")\r\n                return false\r\n            }\r\n\r\n            // Normalize key to lowercase\r\n            key = key.toLowerCase()\r\n\r\n            // Check if key is valid\r\n            if (this.typingKeys.indexOf(key) === -1) {\r\n                console.warn(`Invalid key: ${key}`);\r\n                return false;\r\n            }\r\n\r\n            // Handle mode constraints\r\n            if (this.mode === RecordingMode.SingleWord && this.text.includes(' ')) {\r\n                console.warn(\"Cannot add more characters in SingleWord mode\")\r\n                return false\r\n            }\r\n\r\n            if (this.mode === RecordingMode.LimitedCharacters &&\r\n                this.text.length >= this.characterLimit) {\r\n                console.warn(`Character limit of ${this.characterLimit} reached`)\r\n                return false\r\n            }\r\n\r\n            // Apply shift if needed\r\n            let finalChar = this.isShiftPressed && this.shiftCharMap[key]\r\n                ? this.shiftCharMap[key]\r\n                : (this.isShiftPressed ? key.toUpperCase() : key)\r\n\r\n            // Add character\r\n            this.text += finalChar\r\n\r\n            // Log current state\r\n            this.logCurrentState()\r\n\r\n            return true\r\n        }\r\n\r\n        /**\r\n         * Toggles shift key state\r\n         * @param pressed Whether shift is pressed\r\n         */\r\n        setShift(pressed: boolean): void {\r\n            this.isShiftPressed = pressed\r\n            console.log(`Shift key is now ${pressed ? 'ON' : 'OFF'}`)\r\n        }\r\n\r\n        /**\r\n         * Stops recording and returns the recorded text\r\n         * @returns Recorded text\r\n         */\r\n        stopRecording(): string {\r\n            const recordedText = this.text\r\n            this.isRecording = false\r\n            this.text = \"\"\r\n            console.log(\"Recording stopped.\")\r\n            return recordedText\r\n        }\r\n\r\n        /**\r\n         * Gets the current recorded text\r\n         * @returns Current text\r\n         */\r\n        getText(): string {\r\n            return this.text\r\n        }\r\n\r\n        /**\r\n         * Logs the current state of the recorder\r\n         */\r\n        private logCurrentState(): void {\r\n            console.log(`\r\nSmart Type Recorder\r\n-------------------\r\nText: ${this.text}\r\nMode: ${this.mode}\r\nShift: ${this.isShiftPressed ? 'ON' : 'OFF'}\r\nChars Entered: ${this.text.length}\r\n            `)\r\n        }\r\n\r\n        /**\r\n         * Clears the current text\r\n         */\r\n        clear(): void {\r\n            this.text = \"\"\r\n            console.log(\"Text cleared.\")\r\n        }\r\n    }\r\n\r\n    // Create a global instance for easy use\r\n    export const typeRecorder = new SmartTypeRecorder()\r\n}\r\n"]]}]}]},{"timestamp":1744037435641,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":68,"diffs":[[1,""]]}]}]},{"timestamp":1744037438189,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3634,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":817,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":12028,"diffs":[[1,"browserEvents.onMouseMove(function(x: number, y: number) {\r\n    \r\n})"]]}]}]},{"timestamp":1744038027918,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"/**\r\n * Custom input extension for MakeCode Arcade\r\n * Provides keyboard string input and key character conversion\r\n * Also includes mouse/pointer tracking capabilities\r\n */\r\nnamespace inputs {\r\n    let currentString = \"\";\r\n    let lastKey = 0;\r\n    let isEnterPressed = false;\r\n\r\n    /**\r\n     * Waits for user to press Enter key while recording typed characters\r\n     */\r\n    //% blockId=inputs_wait_on_enter\r\n    //% block=\"wait for text input until Enter\"\r\n    export function waitOnEnter(): string {\r\n        // Reset input variables\r\n        currentString = \"\";\r\n        isEnterPressed = false;\r\n\r\n        // Setup key event handler\r\n        control.runInParallel(function () {\r\n            game.onShade(() => {\r\n                // Display current input\r\n                screen.print(\"Input: \" + currentString, 5, 5);\r\n            });\r\n\r\n            // Setup key listener for all keys\r\n            controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.A);\r\n            });\r\n\r\n            controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.B);\r\n            });\r\n\r\n            controller.up.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.Up);\r\n            });\r\n\r\n            controller.down.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.Down);\r\n            });\r\n\r\n            controller.left.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.Left);\r\n            });\r\n\r\n            controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\r\n                handleKeyPress(ControllerButton.Right);\r\n            });\r\n\r\n            // Add more controller buttons as needed\r\n\r\n            // For browser environment, integrate with keyboard events\r\n            if (control.deviceDalVersion() > 0) {\r\n                browserEvents.onKeyDown(function (key: number) {\r\n                    lastKey = key;\r\n\r\n                    // Check if Enter key (13) was pressed\r\n                    if (key === 13) {\r\n                        isEnterPressed = true;\r\n                    } else {\r\n                        // Add the character to the current string\r\n                        currentString += convertToCharacter(key);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Wait until Enter is pressed\r\n        while (!isEnterPressed) {\r\n            pause(50);\r\n        }\r\n\r\n        return currentString;\r\n    }\r\n\r\n    /**\r\n     * Handle key press from controller buttons\r\n     */\r\n    function handleKeyPress(btn: ControllerButton) {\r\n        // Map controller buttons to characters\r\n        let char = \"\";\r\n\r\n        switch (btn) {\r\n            case ControllerButton.A:\r\n                char = \"a\";\r\n                break;\r\n            case ControllerButton.B:\r\n                char = \"b\";\r\n                break;\r\n            case ControllerButton.Up:\r\n                char = \"^\";\r\n                break;\r\n            case ControllerButton.Down:\r\n                char = \"v\";\r\n                break;\r\n            case ControllerButton.Left:\r\n                char = \"<\";\r\n                break;\r\n            case ControllerButton.Right:\r\n                char = \">\";\r\n                break;\r\n            // Add more mappings as needed\r\n        }\r\n\r\n        if (char) {\r\n            currentString += char;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers a handler for key press events\r\n     * @param handler code to run when a key is pressed\r\n     */\r\n    //% blockId=inputs_on_keys_pressed\r\n    //% block=\"on key pressed\"\r\n    //% draggableParameters=\"reporter\"\r\n    export function onKeyPressed(handler: (key: number) => void) {\r\n        browserEvents.onKeyDown(function (key: number) {\r\n            lastKey = key;\r\n            handler(key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts a key code to its corresponding character\r\n     * Handles special keys and modifier combinations\r\n     */\r\n    //% blockId=inputs_convert_to_character\r\n    //% block=\"convert key code %key to character\"\r\n    export function convertToCharacter(key: number): string {\r\n        // Handle standard letter keys (a-z)\r\n        if (key >= 65 && key <= 90) {\r\n            // For capital letters (with shift)\r\n            if (browserEvents.Shift.isPressed()) {\r\n                return String.fromCharCode(key);\r\n            }\r\n            // For lowercase letters\r\n            return String.fromCharCode(key + 32);\r\n        }\r\n\r\n        // Handle number keys (0-9)\r\n        if (key >= 48 && key <= 57) {\r\n            if (browserEvents.Shift.isPressed()) {\r\n                // Handle shift+number combinations\r\n                const shiftNumberMap: { [key: number]: string } = {\r\n                    48: \")\", // 0\r\n                    49: \"!\", // 1\r\n                    50: \"@\", // 2\r\n                    51: \"#\", // 3\r\n                    52: \"$\", // 4\r\n                    53: \"%\", // 5\r\n                    54: \"^\", // 6\r\n                    55: \"&\", // 7\r\n                    56: \"*\", // 8\r\n                    57: \"(\" // 9\r\n                };\r\n                return shiftNumberMap[key] || \"\";\r\n            }\r\n            return String.fromCharCode(key);\r\n        }\r\n\r\n        // Handle special keys\r\n        const specialKeyMap: { [key: number]: string } = {\r\n            32: \" \",   // Space\r\n            13: \"\\n\",  // Enter\r\n            9: \"\\t\",   // Tab\r\n\r\n            // Punctuation\r\n            186: browserEvents.Shift.isPressed() ? \":\" : \";\",\r\n            187: browserEvents.Shift.isPressed() ? \"+\" : \"=\",\r\n            188: browserEvents.Shift.isPressed() ? \"<\" : \",\",\r\n            189: browserEvents.Shift.isPressed() ? \"_\" : \"-\",\r\n            190: browserEvents.Shift.isPressed() ? \">\" : \".\",\r\n            191: browserEvents.Shift.isPressed() ? \"?\" : \"/\",\r\n            192: browserEvents.Shift.isPressed() ? \"~\" : \"`\",\r\n            219: browserEvents.Shift.isPressed() ? \"{\" : \"[\",\r\n            220: browserEvents.Shift.isPressed() ? \"|\" : \"\\\\\",\r\n            221: browserEvents.Shift.isPressed() ? \"}\" : \"]\",\r\n            222: browserEvents.Shift.isPressed() ? \"\\\"\" : \"'\"\r\n        };\r\n\r\n        // Handle Ctrl+Alt combinations for special characters\r\n        if (browserEvents.Ctrl.isPressed() && browserEvents.Alt.isPressed()) {\r\n            const ctrlAltMap: { [key: number]: string } = {\r\n                48: \"]\", // Ctrl+Alt+0\r\n                49: \"¡\", // Ctrl+Alt+1\r\n                50: \"²\", // Ctrl+Alt+2\r\n                51: \"³\", // Ctrl+Alt+3\r\n                // Add more combinations as needed\r\n            };\r\n            return ctrlAltMap[key] || \"\";\r\n        }\r\n\r\n        return specialKeyMap[key] || \"\";\r\n    }\r\n}\r\n\r\nnamespace browserEvents {\r\n    /**\r\n     * Mouse events\r\n     */\r\n    export enum MouseButtonEvent {\r\n        //% block=\"pressed\"\r\n        Pressed = 1,\r\n        //% block=\"released\" \r\n        Released = 2\r\n    }\r\n\r\n    /**\r\n     * Key events\r\n     */\r\n    export enum KeyEvent {\r\n        //% block=\"pressed\"\r\n        Pressed = 1,\r\n        //% block=\"released\"\r\n        Released = 2\r\n    }\r\n\r\n    /**\r\n     * Generic events\r\n     */\r\n    export enum Event {\r\n        //% block=\"pointer down\"\r\n        PointerDown = 1,\r\n        //% block=\"pointer up\"\r\n        PointerUp = 2\r\n    }\r\n\r\n    /**\r\n     * Track mouse movement\r\n     * @param handler code to run when mouse moves\r\n     */\r\n    //% blockId=browser_on_mouse_move\r\n    //% block=\"on mouse move\"\r\n    //% draggableParameters=\"reporter\"\r\n    export function onMouseMove(handler: (x: number, y: number) => void) {\r\n        // This would be implemented by the browser runtime\r\n        // Using a stub implementation for the extension\r\n        control.runInParallel(function () {\r\n            game.onShade(() => {\r\n                // This is where browser implementation would call the handler\r\n                // with current mouse coordinates\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Mouse button handler\r\n     */\r\n    export const MouseAny = {\r\n        /**\r\n         * Register for mouse button events\r\n         * @param event type of event to register for\r\n         * @param handler code to run when event occurs\r\n         */\r\n        //% blockId=browser_on_mouse_event\r\n        //% block=\"on any mouse button %event\"\r\n        //% draggableParameters=\"reporter\"\r\n        onEvent: function (event: MouseButtonEvent, handler: (x: number, y: number) => void) {\r\n            // Implementation would be provided by browser runtime\r\n        },\r\n\r\n        /**\r\n         * Check if any mouse button is currently pressed\r\n         */\r\n        //% blockId=browser_is_mouse_pressed\r\n        //% block=\"any mouse button is pressed\"\r\n        isPressed: function (): boolean {\r\n            // Implementation would be provided by browser runtime\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Pause until mouse event occurs\r\n         * @param event type of event to wait for\r\n         */\r\n        //% blockId=browser_pause_until_mouse\r\n        //% block=\"pause until any mouse button %event\"\r\n        pauseUntil: function (event: MouseButtonEvent) {\r\n            // Implementation would be provided by browser runtime\r\n            pause(100); // Placeholder\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle wheel events\r\n     * @param handler code to run when wheel is moved\r\n     */\r\n    //% blockId=browser_on_wheel\r\n    //% block=\"on wheel moved\"\r\n    //% draggableParameters=\"reporter\"\r\n    export function onWheel(handler: (dx: number, dy: number, dz: number) => void) {\r\n        // Implementation would be provided by browser runtime\r\n    }\r\n\r\n    /**\r\n     * Register for generic pointer events\r\n     * @param event type of event to register for\r\n     * @param handler code to run when event occurs\r\n     */\r\n    //% blockId=browser_on_event\r\n    //% block=\"on %event\"\r\n    export function onEvent(event: Event, handler: () => void) {\r\n        // Implementation would be provided by browser runtime\r\n    }\r\n\r\n    /**\r\n     * Register for keyboard key down events\r\n     * @param handler code to run when key is pressed\r\n     */\r\n    //% blockId=browser_on_key_down\r\n    //% block=\"on key down\"\r\n    //% draggableParameters=\"reporter\"\r\n    export function onKeyDown(handler: (key: number) => void) {\r\n        // Implementation would be provided by browser runtime\r\n    }\r\n\r\n    // Common modifier keys as pseudo-buttons\r\n    export const Shift = {\r\n        isPressed: function (): boolean {\r\n            // Implementation would be provided by browser runtime\r\n            return false;\r\n        }\r\n    };\r\n\r\n    export const Ctrl = {\r\n        isPressed: function (): boolean {\r\n            // Implementation would be provided by browser runtime\r\n            return false;\r\n        }\r\n    };\r\n\r\n    export const Alt = {\r\n        isPressed: function (): boolean {\r\n            // Implementation would be provided by browser runtime\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // Example of a keyboard key object (for the A key)\r\n    export const A = {\r\n        /**\r\n         * Register for key events\r\n         * @param event type of event to register for\r\n         * @param handler code to run when event occurs\r\n         */\r\n        onEvent: function (event: KeyEvent, handler: () => void) {\r\n            // Implementation would be provided by browser runtime\r\n        },\r\n\r\n        /**\r\n         * Check if key is currently pressed\r\n         */\r\n        isPressed: function (): boolean {\r\n            // Implementation would be provided by browser runtime\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Pause until key event occurs\r\n         * @param event type of event to wait for\r\n         */\r\n        pauseUntil: function (event: KeyEvent) {\r\n            // Implementation would be provided by browser runtime\r\n            pause(100); // Placeholder\r\n        }\r\n    };\r\n}"]]}]}]},{"timestamp":1744038745025,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":31,"diffs":[[1,""]]}]}]},{"timestamp":1744038746207,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":0,"length1":3353,"diffs":[[1,"browserEvents.Mouse.isPressed()"]]}]}]},{"timestamp":1744039257674,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":3206,"length1":25,"diffs":[[1,"        return pressed.join(\"+\");\r\n"]]}]}]},{"timestamp":1744039895477,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1871,"length1":47,"diffs":[[1,"    export function currentKeys(): string {\r\n"]]}]}]},{"timestamp":1744039905823,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":3240,"length1":325,"diffs":[[1,""]]},{"start1":3245,"length1":118,"diffs":[[1,"game.onUpdateInterval(200, function () {\r\n    console.logValue(\"Keys\", inputs.currentKeys());\r\n"]]}]}]},{"timestamp":1744040309795,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1565,"length1":86,"diffs":[[1,""]]},{"start1":1795,"length1":984,"diffs":[[1,""]]},{"start1":1804,"length1":51,"diffs":[[1,"     * Returns a string like \"Shift+A\" or \"Ctrl+Alt+G+2\"\r\n"]]},{"start1":1957,"length1":48,"diffs":[[1,""]]},{"start1":1959,"length1":0,"diffs":[[1,"        // Use a simple for loop to check each key directly\r\n        const keyNames = [\r\n            \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\r\n            \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\r\n            \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\",\r\n            \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"Shift\", \"Ctrl\",\r\n            \"Alt\", \"Meta\", \"Enter\", \"Tab\", \"CapsLock\",\r\n            \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"\r\n        ];\r\n\r\n        // Iterate through the key names directly without creating another array\r\n"]]},{"start1":3242,"length1":507,"diffs":[[1,"    export function convertKeybind(Keybind: string[]): string {\r\n        if (Keybind.length == 1 && Keybind[0].length == 1) {\r\n            return Keybind[0].toLowerCase()\r\n        } else if (Keybind.length == 2 && Keybind[0] == 'Shift') {\r\n            return Keybind[1]\r\n"]]},{"start1":3524,"length1":355,"diffs":[[1,"        return Keybind.join('+')\r\n"]]},{"start1":3565,"length1":8376,"diffs":[[1,""]]},{"start1":3570,"length1":95,"diffs":[[1,"game.onUpdateInterval(2, function () {\r\n    console.logValue(\"Keys\", inputs.convertKeybind(inputs.currentKeys()));\r\n"]]},{"start1":3688,"length1":508,"diffs":[[1,""]]},{"start1":3693,"length1":190,"diffs":[[1,""]]}]}]},{"timestamp":1744040908646,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"browserEvents.onMouseMove(function (x, y) {\n    mySprite.sayText(\"\" + convertToText(Math.round(x)) + \",\" + convertToText(Math.round(y)))\n})\nlet mySprite: Sprite = null\nmySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":20,"length1":0,"diffs":[[1,"    // Map of all keys you want to track from browserEvents\r\n"]]},{"start1":1881,"length1":115,"diffs":[[1,"    // Track previous key states to detect new presses\r\n    let previousKeyStates: { [key: string]: boolean } = {};\r\n\r\n    // Store typed string\r\n    let typedString: string = \"\";\r\n\r\n    // Store current cursor position (for future features)\r\n    let cursorPosition: number = 0;\r\n\r\n    // History for undo/redo operations\r\n"]]},{"start1":2303,"length1":0,"diffs":[[1,"\r\n    // Buffer for handling fast typing\r\n"]]},{"start1":2380,"length1":37,"diffs":[[1,"    const KEY_BUFFER_TIMEOUT = 100; // milliseconds\r\n\r\n    // Selection tracking\r\n"]]},{"start1":2574,"length1":0,"diffs":[[1,"\r\n    // Initialize key states\r\n"]]},{"start1":2810,"length1":0,"diffs":[[1,"\r\n    // Call this on startup\r\n"]]},{"start1":3068,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":3271,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":3481,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":3617,"length1":0,"diffs":[[1,"\r\n            // Plain alphabetical sort\r\n"]]},{"start1":3798,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":4013,"length1":0,"diffs":[[1,"\r\n        // Check for newly pressed keys\r\n"]]},{"start1":4318,"length1":0,"diffs":[[1,"\r\n        // Update previous states for released keys\r\n"]]},{"start1":4641,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":4896,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":5020,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":5141,"length1":0,"diffs":[[1,"        // Only save if there's a change\r\n"]]},{"start1":5237,"length1":0,"diffs":[[1,"            // Remove any \"future\" history if we've gone back\r\n"]]},{"start1":5432,"length1":0,"diffs":[[1,"\r\n            // Add current state to history\r\n"]]},{"start1":5567,"length1":0,"diffs":[[1,"\r\n            // Limit history size\r\n"]]},{"start1":5975,"length1":0,"diffs":[[1,"\r\n        // Skip if no new keys\r\n"]]},{"start1":6052,"length1":0,"diffs":[[1,"\r\n        // Check for keyboard shortcuts first\r\n"]]},{"start1":6155,"length1":0,"diffs":[[1,"            // Ctrl+Z (Undo)\r\n"]]},{"start1":6298,"length1":0,"diffs":[[1,"\r\n            // Ctrl+Y (Redo)\r\n"]]},{"start1":6443,"length1":48,"diffs":[[1,"\r\n            // Ctrl+A (Select All)\r\n            if (newKeys.indexOf(\"A\")) {\r\n"]]},{"start1":6592,"length1":48,"diffs":[[1,"\r\n            // Ctrl+X (Cut - not implemented fully)\r\n            if (newKeys.includes(\"X\")) {\r\n"]]},{"start1":6863,"length1":73,"diffs":[[1,"\r\n            // Ctrl+C (Copy - not implemented fully)\r\n            if (newKeys.includes(\"C\")) {\r\n"]]},{"start1":7071,"length1":48,"diffs":[[1,"\r\n            // Ctrl+V (Paste - not implemented fully)\r\n            if (newKeys.includes(\"V\")) {\r\n"]]},{"start1":7329,"length1":52,"diffs":[[1,"        if (newKeys.includes(\"Backspace\")) {\r\n"]]},{"start1":7555,"length1":82,"diffs":[[1,"                    typedString = typedString.substring(0, typedString.length - 1);\r\n"]]},{"start1":7908,"length1":81,"diffs":[[1,"        const nonModifiers = newKeys.filter(k => !modifiers.includes(k));\r\n"]]},{"start1":9469,"length1":88,"diffs":[[1,"        if (key.startsWith(\"Arrow\") || key === \"Backspace\" || key === \"CapsLock\") {\r\n"]]},{"start1":11389,"length1":83,"diffs":[[1,"            typedString = typedString.substring(0, start) + typedString.substring(end);\r\n"]]},{"start1":13059,"length1":0,"diffs":[[1,"\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});"]]}]},{"type":"edited","filename":"test.ts","patch":[{"start1":0,"length1":824,"diffs":[[1,""]]}]}]},{"timestamp":1744041508301,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"[o{P#29!m~.-z1gd?[)t\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"e7T6U6$YE4p^f+dUncTv\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"O8436y~vN[s:3zrGHqrW\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"cok^1/:]y1hoVZ6`I6+3\">Enemy</variable><variable id=\"u$b;*Q7!}?Y5KErKhtpF\">mySprite</variable><variable id=\"dxqFg38|XTeMGP.xDG4:\">mySprite2</variable></variables><block type=\"pxt-on-start\" x=\"53\" y=\"64\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"u$b;*Q7!}?Y5KErKhtpF\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block><block type=\"browserEvents_onMouseMove\" x=\"167\" y=\"252\"><value name=\"HANDLER_DRAG_PARAM_x\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">x</field></block></value><value name=\"HANDLER_DRAG_PARAM_y\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">y</field></block></value><statement name=\"HANDLER\"><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"u$b;*Q7!}?Y5KErKhtpF\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">:)</field></shadow><block type=\"text_join\"><mutation items=\"3\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow><block type=\"variable_to_text\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">x</field></block></value></block></value></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">,</field></shadow></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variable_to_text\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">y</field></block></value></block></value></block></value></block></value><value name=\"timeOnScreen\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><value name=\"animated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,""]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":5876,"length1":42,"diffs":[[1,"            // TODO: im\r\n"]]},{"start1":6231,"length1":0,"diffs":[[1,"\r\n        // Handle Backspace key\r\n"]]},{"start1":6409,"length1":0,"diffs":[[1,"                // Remove last character\r\n"]]},{"start1":6734,"length1":0,"diffs":[[1,"\r\n        // Skip if only modifier keys are pressed\r\n"]]},{"start1":6979,"length1":0,"diffs":[[1,"\r\n        // If we have a selection and typing a character, replace the selection\r\n"]]},{"start1":7134,"length1":0,"diffs":[[1,"\r\n        // Process each non-modifier key\r\n"]]},{"start1":7275,"length1":0,"diffs":[[1,"\r\n            // Convert key to character\r\n"]]},{"start1":7424,"length1":0,"diffs":[[1,"\r\n                // Set timeout to flush buffer if no more keys are pressed\r\n"]]},{"start1":7740,"length1":0,"diffs":[[1,"            // Insert at cursor position (currently always at end)\r\n"]]},{"start1":8120,"length1":0,"diffs":[[1,"        // Is Shift pressed?\r\n"]]},{"start1":8208,"length1":0,"diffs":[[1,"\r\n        // Handle special keys\r\n"]]},{"start1":8368,"length1":0,"diffs":[[1,"\r\n        // Skip function keys, arrows, etc.\r\n"]]},{"start1":8538,"length1":0,"diffs":[[1,"\r\n        // Handle letter keys\r\n"]]},{"start1":8703,"length1":0,"diffs":[[1,"\r\n        // Handle number keys\r\n"]]},{"start1":8830,"length1":0,"diffs":[[1,"                // Shift + number mappings\r\n"]]},{"start1":9375,"length1":0,"diffs":[[1,"\r\n        // If it's a special key we don't want to convert to a character\r\n"]]},{"start1":9612,"length1":0,"diffs":[[1,"\r\n"]]}]}]},{"timestamp":1744055598403,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":11271,"length1":1260,"diffs":[[1,""]]}]}]},{"timestamp":1744055758814,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1543,"length1":38,"diffs":[[1,"        \"Backspace\": browserEvents.BackSlash,\r\n"]]}]}]},{"timestamp":1744055943881,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1543,"length1":47,"diffs":[[1,"        \"Backspace\": browserEvents.,\r\n"]]}]}]},{"timestamp":1744056509146,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1543,"length1":131,"diffs":[[1,"        \"Backspace\": browserEvents.BackSlash,\r\n"]]},{"start1":1727,"length1":205,"diffs":[[1,"        \"ArrowRight\": browserEvents.ArrowRight\r\n"]]},{"start1":6248,"length1":2,"diffs":[[1,""]]},{"start1":7691,"length1":0,"diffs":[[1,"        const shiftPressed = previousKeyStates[\"Shift\"];\r\n"]]},{"start1":7875,"length1":122,"diffs":[[1,"        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") {\r\n"]]},{"start1":7998,"length1":130,"diffs":[[1,"        if (key.length === 1 && key >= \"A\" && key <= \"Z\") {\r\n"]]},{"start1":8130,"length1":72,"diffs":[[1,"        if (key.length === 1 && key >= \"0\" && key <= \"9\") {\r\n"]]},{"start1":8224,"length1":112,"diffs":[[1,"                const shiftNumberMap: { [key: string]: string } = {\r\n"]]},{"start1":8448,"length1":31,"diffs":[[1,"                    \"6\": \"^\",\r\n"]]}]}]},{"timestamp":1744057434107,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1744221888616,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]}]},{"timestamp":1744221890199,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":5314,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1501,"diffs":[[1,"\n"]]}]}]},{"timestamp":1744222158476,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1744246006716,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1744246022350,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":537,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</variable><variable id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</variable><variable type=\"KIND_SpriteKind\" id=\"#BhyJzk=2%X#5U%W!CjD\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"nyY=rS5neXK_5-nSN?mR\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"dyx!wNUqf)4lmS5|z7dg\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"P+=M5-6]jLU7xnD6{^wQ\">Enemy</variable></variables><comment x=\"75.828125\" y=\"194.33333333333334\" w=\"480\" h=\"120\">\n"]]},{"start1":658,"length1":50,"diffs":[[1,"</comment><comment x=\"20\" y=\"663\" w=\"160\" h=\"120\">\n"]]},{"start1":724,"length1":350,"diffs":[[1,"</comment><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1604,"length1":3708,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block><block type=\"gameinterval\" x=\"602\" y=\"20\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getDebugInfo()</field></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.convertKeybind(currentKeys)</field></block></value></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"gameupdate\" x=\"20\" y=\"441\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><data>{\"commentRefs\":[\"0\",\"1\"],\"fieldData\":{\"~commentOffsetX\":\"16\",\"~commentOffsetY\":\"16\"}}</data><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"326\" y=\"441\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.clearTypedString();\" numlines=\"1\"></mutation><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":2459,"length1":379,"diffs":[[1,""]]},{"start1":2645,"length1":49,"diffs":[[1,""]]},{"start1":3572,"length1":2,"diffs":[[1,""]]},{"start1":4021,"length1":172,"diffs":[[1,""]]},{"start1":4047,"length1":61,"diffs":[[1,""]]},{"start1":4186,"length1":80,"diffs":[[1,"            if (currentPressed.indexOf(key) == -1) {\r\n"]]},{"start1":4289,"length1":37,"diffs":[[1,""]]},{"start1":4315,"length1":2,"diffs":[[1,""]]},{"start1":4363,"length1":1892,"diffs":[[1,""]]},{"start1":8523,"length1":69,"diffs":[[1,"                const shiftNumberMap: { [key: string]: string } = { // just defining a variable when i need to\r\n"]]},{"start1":8790,"length1":64,"diffs":[[1,"                    \"6\": \"?\",\r\n"]]},{"start1":9105,"length1":39,"diffs":[[1,"     * Gets the typed string\r\n"]]},{"start1":9228,"length1":2,"diffs":[[1,""]]},{"start1":9237,"length1":65,"diffs":[[1,"     * Clears the typed string\r\n"]]},{"start1":9278,"length1":77,"diffs":[[1,""]]},{"start1":9451,"length1":30,"diffs":[[1,"     * Select all text\r\n"]]},{"start1":9484,"length1":74,"diffs":[[1,""]]},{"start1":9702,"length1":45,"diffs":[[1,"     * Delete the current selection\r\n"]]},{"start1":9748,"length1":75,"diffs":[[1,""]]},{"start1":10136,"length1":32,"diffs":[[1,"     * Undo the last action\r\n"]]},{"start1":10174,"length1":66,"diffs":[[1,""]]},{"start1":10430,"length1":39,"diffs":[[1,"     * Redo the last undone action\r\n"]]},{"start1":10475,"length1":66,"diffs":[[1,""]]},{"start1":10739,"length1":2,"diffs":[[1,""]]},{"start1":10748,"length1":302,"diffs":[[1,"     * Converts keybind array to string representation\r\n"]]},{"start1":10813,"length1":84,"diffs":[[1,""]]},{"start1":11033,"length1":68,"diffs":[[1,"        } else if (keybind.length == 2 && keybind[0] == 'Shift') {\r\n"]]},{"start1":11144,"length1":35,"diffs":[[1,"        return keybind.join('+');\r\n"]]},{"start1":11188,"length1":2,"diffs":[[1,""]]},{"start1":11197,"length1":133,"diffs":[[1,"     * Get debug info as string\r\n"]]},{"start1":11239,"length1":74,"diffs":[[1,""]]},{"start1":11615,"length1":2,"diffs":[[1,""]]},{"start1":11788,"length1":96,"diffs":[[1,"    //% blockId=inputs_start_key_logging block=\"start key logging and run $callback\"\r\n"]]},{"start1":12563,"length1":82,"diffs":[[1,"    //% blockId=inputs_enable_clear_button block=\"enable clear button\"\r\n"]]},{"start1":12873,"length1":1,"diffs":[[1,"}\r\n"]]}]}]},{"timestamp":1744246619054,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":1543,"length1":41,"diffs":[[1,"        \"Backspace\": browserEvents.End, // change to Backspace once its added if it is, otherwise, ill use an other key like this\r\n"]]},{"start1":1860,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":1979,"length1":310,"diffs":[[1,"        \".\": browserEvents.Period\r\n\r\n"]]},{"start1":10554,"length1":48,"diffs":[[1,""]]},{"start1":10680,"length1":134,"diffs":[[1,"        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") { // keys that dont change anything\r\n"]]},{"start1":10837,"length1":2,"diffs":[[1,""]]},{"start1":10895,"length1":90,"diffs":[[1,"        if (key.length === 1 && key >= \"A\" && key <= \"Z\") { // letters\r\n"]]},{"start1":11038,"length1":116,"diffs":[[1,"        if (key.length === 1 && key >= \"0\" && key <= \"9\") { // numbers\r\n"]]},{"start1":11367,"length1":65,"diffs":[[1,"                    \"6\": \"^\", // Fixed: was \"?\" changed to \"^\"\r\n"]]},{"start1":11677,"length1":707,"diffs":[[1,""]]}]}]},{"timestamp":1744247216878,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":2042,"length1":39,"diffs":[[1,"        //\";\": browserEvents.Semicolon,\r\n"]]},{"start1":2197,"length1":2,"diffs":[[1,""]]},{"start1":2640,"length1":29,"diffs":[[1,"\r\n    // Key repeat settings\r\n"]]},{"start1":3294,"length1":0,"diffs":[[1,"\r\n    /**\r\n     * Returns currently pressed keys as an array\r\n     */\r\n"]]},{"start1":4181,"length1":0,"diffs":[[1,"\r\n    /**\r\n     * Detects newly pressed keys since last check\r\n     */\r\n"]]},{"start1":4632,"length1":0,"diffs":[[1,"\r\n                // Start key repeat timer for non-modifier keys\r\n"]]},{"start1":4830,"length1":0,"diffs":[[1,"\r\n        // Check for released keys and clear their timers\r\n"]]},{"start1":5222,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":5263,"length1":0,"diffs":[[1,"    /**\r\n     * Checks if a key is a modifier key\r\n     */\r\n"]]},{"start1":5454,"length1":0,"diffs":[[1,"    /**\r\n     * Start key repeat timer for a key\r\n     */\r\n"]]},{"start1":5557,"length1":0,"diffs":[[1,"        // Clear any existing timer\r\n"]]},{"start1":5623,"length1":0,"diffs":[[1,"\r\n        // Set initial delay timer\r\n"]]},{"start1":5752,"length1":0,"diffs":[[1,"\r\n            // Start the repeating timer\r\n"]]},{"start1":6129,"length1":0,"diffs":[[1,"                        // Handle backspace repeat\r\n"]]},{"start1":6614,"length1":0,"diffs":[[1,"                    // If key is no longer pressed, stop repeating\r\n"]]},{"start1":6818,"length1":0,"diffs":[[1,"    /**\r\n     * Stop key repeat timer for a key\r\n     */\r\n"]]},{"start1":7155,"length1":0,"diffs":[[1,"    /**\r\n     * Checks if a key combination matches the pressed keys\r\n     */\r\n"]]},{"start1":7522,"length1":0,"diffs":[[1,"    /**\r\n     * Save current state to history\r\n     */\r\n"]]},{"start1":8035,"length1":0,"diffs":[[1,"    /**\r\n     * Adds newly pressed keys to the buffer and handles shortcuts\r\n     */\r\n"]]},{"start1":9008,"length1":44,"diffs":[[1,"                // Would copy to clipboard, but that's not available\r\n"]]},{"start1":9166,"length1":47,"diffs":[[1,"                // Would paste from clipboard, but that's not available\r\n"]]},{"start1":10285,"length1":0,"diffs":[[1,"    /**\r\n     * Flushes key buffer to typed string\r\n     */\r\n"]]},{"start1":10602,"length1":0,"diffs":[[1,"    /**\r\n     * Converts a key name to character, handling Shift key\r\n     */\r\n"]]},{"start1":10735,"length1":0,"diffs":[[1,"        // Handle space and special characters\r\n"]]},{"start1":10909,"length1":0,"diffs":[[1,"\r\n        // Keys that don't change anything\r\n"]]},{"start1":11078,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":11138,"length1":0,"diffs":[[1,"\r\n        // Handle letters\r\n"]]},{"start1":11299,"length1":0,"diffs":[[1,"\r\n        // Handle numbers and their shifted symbols\r\n"]]},{"start1":11672,"length1":30,"diffs":[[1,"                    \"6\": \"^\", // Fixed: Changed from \"?\" to \"^\"\r\n"]]},{"start1":12285,"length1":368,"diffs":[[1,"                    \"/\": \"?\",\r\n"]]}]}]},{"timestamp":1744247768414,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":701,"length1":2709,"diffs":[[1,"</comment><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1579,"length1":1351,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block><block type=\"gameinterval\" x=\"582\" y=\"0\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getDebugInfo()</field></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.convertKeybind(currentKeys)</field></block></value></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"gameupdate\" x=\"0\" y=\"421\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><data>{\"commentRefs\":[\"0\",\"1\"],\"fieldData\":{\"~commentOffsetX\":\"16\",\"~commentOffsetY\":\"16\"}}</data><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"306\" y=\"421\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.clearTypedString();\" numlines=\"1\"></mutation><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":4,"length1":0,"diffs":[[1," * Currently neamspace Blocks dont work, here is a working system\n * \n * Ctrl+z and Ctrl+y work as undo redo\n */\n/**\n"]]},{"start1":325,"length1":117,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":11738,"length1":0,"diffs":[[1,"    /**\r\n     * Gets the current typed string.\r\n     */\r\n"]]},{"start1":15405,"length1":113,"diffs":[[1,"    //% block=\"start key logging and run $callback\"\r\n    //% callbackShadow=variables_set\r\n"]]}]}]},{"timestamp":1744248051482,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":536,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</variable><variable id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</variable><variable type=\"KIND_SpriteKind\" id=\"#BhyJzk=2%X#5U%W!CjD\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"nyY=rS5neXK_5-nSN?mR\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"dyx!wNUqf)4lmS5|z7dg\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"P+=M5-6]jLU7xnD6{^wQ\">Enemy</variable></variables><comment x=\"55\" y=\"174\" w=\"480\" h=\"120\">\n"]]},{"start1":636,"length1":52,"diffs":[[1,"</comment><comment x=\"0\" y=\"643\" w=\"160\" h=\"120\">\n"]]},{"start1":701,"length1":2709,"diffs":[[1,"</comment><block type=\"gameinterval\" x=\"582\" y=\"0\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getDebugInfo()</field></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.convertKeybind(currentKeys)</field></block></value></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"51\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":3938,"length1":1353,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block><block type=\"gameupdate\" x=\"0\" y=\"421\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><data>{\"commentRefs\":[\"0\",\"1\"],\"fieldData\":{\"~commentOffsetX\":\"16\",\"~commentOffsetY\":\"16\"}}</data><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"306\" y=\"421\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.clearTypedString();\" numlines=\"1\"></mutation><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1744306909104,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1744306944253,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":360,"length1":6,"diffs":[[1,"    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n"]]},{"start1":1501,"length1":21,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":99,"length1":120,"diffs":[[1,"        \"browser-events\": \"*\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":7252,"length1":53,"diffs":[[1,""]]},{"start1":7785,"length1":42,"diffs":[[1,""]]},{"start1":7833,"length1":43,"diffs":[[1,"                if (hasSelection) {\r\n                    deleteSelection();\r\n                    saveToHistory();\r\n                }\r\n"]]},{"start1":8007,"length1":0,"diffs":[[1,"            // TODO: implement clipboard\r\n"]]},{"start1":16432,"length1":3,"diffs":[[1,"}"]]}]}]},{"timestamp":1744307530382,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":538,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</variable><variable id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</variable><variable type=\"KIND_SpriteKind\" id=\"#BhyJzk=2%X#5U%W!CjD\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"nyY=rS5neXK_5-nSN?mR\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"dyx!wNUqf)4lmS5|z7dg\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"P+=M5-6]jLU7xnD6{^wQ\">Enemy</variable></variables><comment x=\"4\" y=\"126\" w=\"480\" h=\"120\">\nCurrently neamspace Blocks dont work, here is a working system\nCtrl+z and Ctrl+y work as undo redo\n</comment><comment x=\"-51\" y=\"595\" w=\"160\" h=\"120\">\n"]]},{"start1":702,"length1":4625,"diffs":[[1,"</comment><block type=\"gameinterval\" x=\"531\" y=\"-48\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getDebugInfo()</field></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"tAnkZ0zEy2!U$=iVn6f3\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.convertKeybind(currentKeys)</field></block></value></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"7s*)?)s`%C%sD0JScPJ(\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block><block type=\"gameupdate\" x=\"-51\" y=\"373\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><data>{\"commentRefs\":[\"0\",\"1\"],\"fieldData\":{\"~commentOffsetX\":\"16\",\"~commentOffsetY\":\"16\"}}</data><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"255\" y=\"373\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.clearTypedString();\" numlines=\"1\"></mutation><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":137,"length1":71,"diffs":[[1,"    inputs.clearTypedString();\nconsole.logValue(\"Typed\", \"Cleared\")\n"]]},{"start1":208,"length1":109,"diffs":[[1,"/**\n * Currently neamspace Blocks dont work, here is a working system\n * \n * Ctrl+z and Ctrl+y work as undo redo\n */\n"]]},{"start1":360,"length1":7,"diffs":[[1,"    .\n"]]},{"start1":392,"length1":22,"diffs":[[1,""]]},{"start1":830,"length1":75,"diffs":[[1,""]]},{"start1":915,"length1":0,"diffs":[[1,"stats.turnStats(true)"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":384,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":7252,"length1":0,"diffs":[[1,"        if (!browserEvents.Any.isPressed()) return;\r\n"]]},{"start1":7397,"length1":69,"diffs":[[1,"        if (newKeys.length === 0) return;\r\n"]]}]}]},{"timestamp":1744308131260,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":848,"length1":0,"diffs":[[1,"        // Show debug info\n        mySprite.sayText(inputs.getDebugInfo())\n"]]}]}]},{"timestamp":1744308133494,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":553,"length1":3118,"diffs":[[1,"</comment><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field><comment pinned=\"false\" h=\"80\" w=\"160\">Currently neamspace Blocks dont work, here is a working system\n"]]},{"start1":1054,"length1":1667,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"stats_turnStats\"><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value></block></next></block></statement></block><block type=\"gameinterval\" x=\"630\" y=\"-16\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"inputs_getDebugInfo\"></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"inputs_getDebugInfo\"></block></value><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"inputs_convertKeybind\"><value name=\"keybind\"><block type=\"variables_get\"><field name=\"VAR\" id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</field></block></value></block></value></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"gameupdate\" x=\"-28\" y=\"386\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"278\" y=\"386\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><data>0</data><statement name=\"HANDLER\"><block type=\"inputs_clearTypedString\"><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":410,"length1":30,"diffs":[[1,""]]},{"start1":726,"length1":86,"diffs":[[1,"    mySprite.sayText(inputs.getDebugInfo())\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":384,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":2427,"length1":29,"diffs":[[1,"    const MAX_HISTORY = 50;\r\n"]]}]}]},{"timestamp":1744308687163,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1961,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</variable><variable id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</variable><variable type=\"KIND_SpriteKind\" id=\"hZt5kug[g}([[H25bFE+\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"=Jmo?r%qm|{pK(9uARwn\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"ztg|lH0f/o.jq,R!LTx.\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"]lcLF7@i7lP*{@2`[B|-\">Enemy</variable></variables><comment x=\"921\" y=\"581\" w=\"160\" h=\"120\">\nTests are here\n</comment><block type=\"gameinterval\" x=\"630\" y=\"-16\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log the typed string every 100ms</comment><value name=\"period\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const currentKeys = inputs.currentKeys();\" numlines=\"1\" declaredvars=\"currentKeys\"></mutation><next><block type=\"console_log_value\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the typed string</comment><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">inputs.getTypedString()</field></block></value><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Show debug info</comment><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">Hello</field></shadow><block type=\"inputs_getDebugInfo\"></block></value><value name=\"ADD1\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">World</field></shadow><block type=\"inputs_convertKeybind\"><value name=\"keybind\"><block type=\"variables_get\"><field name=\"VAR\" id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</field></block></value></block></value></block></value><next><block type=\"controls_if\"><comment pinned=\"false\" h=\"80\" w=\"160\">Also show current keys for debugging</comment><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Active Keys</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"inputs_convertKeybind\"><value name=\"keybind\"><block type=\"variables_get\"><field name=\"VAR\" id=\"$MP#VU_a[|nP$V-p;m)?\">currentKeys</field></block></value></block></value></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"40\" y=\"49\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field><comment pinned=\"false\" h=\"80\" w=\"160\">Currently neamspace Blocks dont work, here is a working system\n\nCtrl+z and Ctrl+y work as undo redo</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"stats_turnStats\"><value name=\"on\"><shadow type=\"toggleOnOff\"><field name=\"on\">true</field></shadow></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"fhO04AU2k`X)RZG~.q}o\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">74</field></shadow></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">113</field></shadow></value></block></next></block></next></block></statement></block><block type=\"gameupdate\" x=\"-28\" y=\"386\"><comment pinned=\"false\" h=\"80\" w=\"160\">Process keys every frame</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"inputs.processKeyBuffer();\" numlines=\"1\"></mutation></block></statement></block><block type=\"keyonevent\" x=\"278\" y=\"386\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Add a button to clear the typed string</comment><data>0</data><statement name=\"HANDLER\"><block type=\"inputs_clearTypedString\"><next><block type=\"console_log_value\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">Typed</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">Cleared</field></block></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":48,"diffs":[[1,"/**\n * Tests are here\n */\n// Add a button to clear the typed string\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\n    inputs.clearTypedString()\n    console.logValue(\"Typed\", \"Cleared\")\n"]]},{"start1":211,"length1":13,"diffs":[[1,"// Currently neamspace Blocks dont work, here is a working system\n// \n// Ctrl+z and Ctrl+y work as undo redo\n"]]},{"start1":355,"length1":592,"diffs":[[1,"    . \n"]]},{"start1":388,"length1":0,"diffs":[[1,"stats.turnStats(true)\nmySprite.setPosition(74, 113)\n// Process keys every frame\ngame.onUpdate(function () {\n    inputs.processKeyBuffer();\n})\n// Log the typed string every 100ms\ngame.onUpdateInterval(100, function () {\n    const currentKeys = inputs.currentKeys();\n// Show the typed string\n    console.logValue(\"Typed\", inputs.getTypedString())\n    // Show debug info\n    mySprite.sayText(\"\" + inputs.getDebugInfo() + inputs.convertKeybind(currentKeys))\n    // Also show current keys for debugging\n    if (currentKeys.length > 0) {\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys))\n    }\n})\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":99,"length1":30,"diffs":[[1,"        \"browser-events\": \"*\",\n        \"Stats\": \"github:UnsignedArduino/Stats#758e35856bd5565e5d0e25c95cccfac79b7fc168\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":15076,"length1":167,"diffs":[[1,"     * Start processing input and run a callback when the typed string updates.\r\n     * @param callback a function that receives the current typed string\r\n     */\r\n"]]},{"start1":15283,"length1":37,"diffs":[[1,"    //% block=\"on typed key updates $typed\"\r\n"]]},{"start1":15525,"length1":0,"diffs":[[1,"\r\n"]]}]}]},{"timestamp":1744309273831,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":830,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"k:-xm=an{t[#et_J]keC\">str</variable><variable id=\"XKJms)iv=2~Gil:KD3w1\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"bJyj#)]etWncr=ewfK7_\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"Nd8*!Zvt+^wjFi;kj1r3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"9`x(w*o3Ph_*mcHX2Cg9\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"=Z*yo#C/u*b3(TV[9M_G\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"k:-xm=an{t[#et_J]keC\">str</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\"></field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XKJms)iv=2~Gil:KD3w1\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1590,"length1":229,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"24\" y=\"343\"><field name=\"HANDLER_typed\" id=\"k:-xm=an{t[#et_J]keC\">str</field></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"inputs.startKeyLogging(null, function (str) {\n\t\n})\nlet str = \"\"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":15233,"length1":51,"diffs":[[1,""]]},{"start1":15286,"length1":69,"diffs":[[1,"    //% block=\"on typed key %typed\"\r\n    //% typed.defl=typedString\r\n"]]},{"start1":15391,"length1":92,"diffs":[[1,"    export function startKeyLogging(callback: (typed: string) => void): void {\r\n"]]}]}]},{"timestamp":1744317245731,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":50,"diffs":[[1,""]]}]}]},{"timestamp":1744317259789,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":882,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\".fmAm}cP[4CvW@RDk4$4\">str</variable><variable id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"`%A#3-SRUN)5t35F$aV9\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"RfPU:m+rDA1XZ}7Mda.1\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"US`#,2:h@G$-A/xhuf@l\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"sY{7~=iL!K~#M^R=S[by\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"inputs.startKeyLogging(0, function (typed) {\n\t\n})\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":15337,"length1":154,"diffs":[[1,"    //% block=\"on typed key updates %typed\"\r\n    //% typed.defl=str\r\n    //% typed.shadow=variables_get\r\n    export function startKeyLogging(_null: any, callback: (typed: string) => void): void {\r\n"]]},{"start1":16024,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1744317748082,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":882,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"`%A#3-SRUN)5t35F$aV9\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"RfPU:m+rDA1XZ}7Mda.1\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"US`#,2:h@G$-A/xhuf@l\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"sY{7~=iL!K~#M^R=S[by\">Enemy</variable><variable id=\".fmAm}cP[4CvW@RDk4$4\">str</variable><variable id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</variable><variable id=\"u0[[`UifVU`;]+M4-(Q+\">typed</variable></variables><block type=\"pxt-on-start\" x=\"56\" y=\"55\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":15076,"length1":163,"diffs":[[1,"      * Start processing input and run a callback when the typed string updates.\r\n      * @param callback a function that receives the current typed string\r\n      * @param _null a variable that does nothing\r\n      */\r\n"]]},{"start1":15337,"length1":98,"diffs":[[1,"    //% block=\"on typed key updates $str str\"\r\n"]]},{"start1":15413,"length1":77,"diffs":[[1,"    export function startKeyLogging(callback: (str: string) => void): void {\r\n"]]},{"start1":15642,"length1":29,"diffs":[[1,"            callback(typed);\r\n"]]},{"start1":15983,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1744318009722,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":76,"length1":22,"diffs":[[1,"        \"device\": \"*\",\n        \"browser-events\": \"*\"\n"]]}]}]},{"timestamp":1744461980357,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":76,"length1":53,"diffs":[[1,"        \"device\": \"*\"\n"]]}]}]},{"timestamp":1744462299573,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1290,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"`%A#3-SRUN)5t35F$aV9\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"RfPU:m+rDA1XZ}7Mda.1\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"US`#,2:h@G$-A/xhuf@l\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"sY{7~=iL!K~#M^R=S[by\">Enemy</variable><variable id=\".fmAm}cP[4CvW@RDk4$4\">str</variable><variable id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</variable><variable id=\"u0[[`UifVU`;]+M4-(Q+\">typed</variable></variables><block type=\"pxt-on-start\" x=\"56\" y=\"57\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1410,"length1":1778,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":270,"diffs":[[1,"let mySprite = sprites.create(img`\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1744468235735,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1744468865731,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":3016,"length1":192,"diffs":[[1,""]]},{"start1":7252,"length1":45,"diffs":[[1,""]]},{"start1":7344,"length1":10,"diffs":[[1,""]]},{"start1":7413,"length1":204,"diffs":[[1,""]]},{"start1":10902,"length1":31,"diffs":[[1,"                    \"/\": \"?\",   // Funny story: when Shift+6 was pressed, it somehow sayed i was pressing '/' instead of 'shift+6'\r\n                                // So while adding the other keys to the symbol map, I figured—why not try mapping '/' to '?'...\r\n                                // And it actually worked! Total meme behavior, but hey—it works 🤷‍♂️😂\r\n"]]},{"start1":11768,"length1":1219,"diffs":[[1,""]]},{"start1":11900,"length1":19,"diffs":[[1,"    //% weight=99\r\n"]]},{"start1":12092,"length1":880,"diffs":[[1,""]]},{"start1":12186,"length1":19,"diffs":[[1,"    //% weight=98\r\n"]]},{"start1":12533,"length1":19,"diffs":[[1,"    //% weight=97\r\n"]]},{"start1":13028,"length1":19,"diffs":[[1,"    //% weight=96\r\n"]]},{"start1":13398,"length1":19,"diffs":[[1,"    //% weight=95\r\n"]]},{"start1":13681,"length1":270,"diffs":[[1,""]]},{"start1":13692,"length1":754,"diffs":[[1,""]]},{"start1":14003,"length1":82,"diffs":[[1,"    //% block=\"convert keybind %keybind\"\r\n    //% group=\"Debug\"\r\n    //% weight=89\r\n"]]},{"start1":14462,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":14670,"length1":19,"diffs":[[1,"    //% weight=90\r\n"]]},{"start1":14921,"length1":48,"diffs":[[1,""]]},{"start1":15065,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":15076,"length1":54,"diffs":[[1,"     * Start processing input and run a callback when the typed string updates.\r\n"]]},{"start1":15239,"length1":488,"diffs":[[1,"    //% blockId=inputs_start_key_logging \r\n    //% block=\"on typed key updates $str\"\r\n    //% str.defl=str\r\n    //% str.shadow=variable_get\r\n    //% draggableParameters\r\n    export function startKeyLogging(handler: (str: string) => void): void {\r\n        game.onUpdate(inputs.processKeyBuffer);\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = inputs.getTypedString();\r\n            handler(typed);\r\n"]]},{"start1":15668,"length1":416,"diffs":[[1,"            const keys = inputs.currentKeys();\r\n            if (keys.length) {\r\n                console.logValue(\"Active Keys\", inputs.convertKeybind(keys));\r\n            }\r\n"]]},{"start1":15844,"length1":926,"diffs":[[1,"            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", inputs.getDebugInfo());\r\n        });\r\n"]]},{"start1":15975,"length1":0,"diffs":[[1,"\r\n\r\n"]]},{"start1":16140,"length1":44,"diffs":[[1,""]]},{"start1":16378,"length1":617,"diffs":[[1,"}\r\n"]]}]}]},{"timestamp":1744469109776,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":3016,"length1":0,"diffs":[[1,"    let isRecording: boolean = false;\r\n    let updateHandler: (text: string) => void = null;\r\n    let keybindHandler: (keys: string[]) => void = null;\r\n    let updateInterval: number = null;\r\n"]]},{"start1":7444,"length1":0,"diffs":[[1,"        if (!isRecording) return;\r\n        \r\n"]]},{"start1":7581,"length1":0,"diffs":[[1,"        \r\n"]]},{"start1":7660,"length1":0,"diffs":[[1,"        \r\n        // If keybind handler is active, notify about current keys\r\n        if (keybindHandler && currentPressed.length > 0) {\r\n            keybindHandler(currentPressed);\r\n        }\r\n        \r\n"]]},{"start1":11353,"length1":368,"diffs":[[1,"                    \"/\": \"?\",\r\n"]]},{"start1":11882,"length1":0,"diffs":[[1,"     * Starts recording keyboard input\r\n     */\r\n    //% blockId=inputs_start_recording\r\n    //% block=\"start keyboard recording\"\r\n    //% group=\"Recording\"\r\n    //% weight=100\r\n    export function startRecording(): void {\r\n        if (!isRecording) {\r\n            isRecording = true;\r\n            game.onUpdate(processKeyBuffer);\r\n            if (updateHandler) {\r\n                updateInterval = game.onUpdateInterval(100, function() {\r\n                    updateHandler(typedString);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops recording keyboard input\r\n     */\r\n    //% blockId=inputs_stop_recording\r\n    //% block=\"stop keyboard recording\"\r\n    //% group=\"Recording\"\r\n    //% weight=99\r\n    export function stopRecording(): void {\r\n        isRecording = false;\r\n        if (updateInterval) {\r\n            clearInterval(updateInterval);\r\n            updateInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current state of recording\r\n     */\r\n    //% blockId=inputs_is_recording\r\n    //% block=\"is keyboard recording\"\r\n    //% group=\"Recording\"\r\n    //% weight=98\r\n    export function isKeyboardRecording(): boolean {\r\n        return isRecording;\r\n    }\r\n\r\n    /**\r\n"]]},{"start1":13233,"length1":19,"diffs":[[1,"    //% weight=90\r\n"]]},{"start1":13425,"length1":0,"diffs":[[1,"     * Sets the typed string to a specific value\r\n     */\r\n    //% blockId=inputs_set_typed_string\r\n    //% block=\"set typed string to %text\"\r\n    //% group=\"Text\"\r\n    //% weight=89\r\n    export function setTypedString(text: string): void {\r\n        typedString = text || \"\";\r\n        cursorPosition = typedString.length;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Append text to the current typed string\r\n     */\r\n    //% blockId=inputs_append_text\r\n    //% block=\"append %text to typed string\"\r\n    //% group=\"Text\"\r\n    //% weight=88\r\n    export function appendText(text: string): void {\r\n        if (text) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            }\r\n            typedString += text;\r\n            cursorPosition = typedString.length;\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    /**\r\n"]]},{"start1":14399,"length1":19,"diffs":[[1,"    //% weight=87\r\n"]]},{"start1":14746,"length1":19,"diffs":[[1,"    //% weight=86\r\n"]]},{"start1":15241,"length1":19,"diffs":[[1,"    //% weight=80\r\n"]]},{"start1":15611,"length1":19,"diffs":[[1,"    //% weight=79\r\n"]]},{"start1":15894,"length1":0,"diffs":[[1,"    /**\r\n     * Get the current keys being pressed\r\n     */\r\n    //% blockId=inputs_get_current_keybind\r\n    //% block=\"current keybind\"\r\n    //% group=\"Keys\"\r\n    //% weight=70\r\n    export function getCurrentKeybind(): string[] {\r\n        return currentKeys();\r\n    }\r\n"]]},{"start1":16175,"length1":0,"diffs":[[1,"     * Checks if a specific key is currently pressed\r\n     */\r\n    //% blockId=inputs_is_key_pressed\r\n    //% block=\"is key %key pressed\"\r\n    //% group=\"Keys\"\r\n    //% weight=69\r\n    export function isKeyPressed(key: string): boolean {\r\n        if (allKeys[key]) {\r\n            return allKeys[key].isPressed();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if a combination of keys is currently pressed\r\n     */\r\n    //% blockId=inputs_check_key_combo\r\n    //% block=\"is keybind %keys pressed\"\r\n    //% group=\"Keys\"\r\n    //% weight=68\r\n    export function isKeyCombinationPressed(keys: string[]): boolean {\r\n        const currentPressed = currentKeys();\r\n        return checkKeyCombination(currentPressed, keys);\r\n    }\r\n\r\n    /**\r\n"]]},{"start1":17240,"length1":84,"diffs":[[1,"    //% block=\"format keybind %keybind\"\r\n    //% group=\"Keys\"\r\n    //% weight=67\r\n"]]},{"start1":17697,"length1":2,"diffs":[[1,""]]},{"start1":17903,"length1":19,"diffs":[[1,"    //% weight=60\r\n"]]},{"start1":18154,"length1":0,"diffs":[[1,"        info += `Recording: ${isRecording}\\n`;\r\n"]]},{"start1":18346,"length1":2,"diffs":[[1,""]]},{"start1":18355,"length1":81,"diffs":[[1,"     * Run a callback when the typed string updates.\r\n"]]},{"start1":18491,"length1":427,"diffs":[[1,"    //% blockId=inputs_on_typed_update\r\n    //% block=\"on typed string update do\"\r\n    //% group=\"Events\" \r\n    //% weight=50\r\n    //% draggableParameters=\"reporter\"\r\n    export function onTypedStringUpdate(handler: (text: string) => void): void {\r\n        updateHandler = handler;\r\n        if (isRecording && updateInterval === null) {\r\n            updateInterval = game.onUpdateInterval(100, function() {\r\n                updateHandler(typedString);\r\n            });\r\n        }\r\n    }\r\n"]]},{"start1":18981,"length1":174,"diffs":[[1,"    /**\r\n     * Run a callback when keys are pressed\r\n     * @param handler a function that receives the current keybind\r\n     */\r\n    //% blockId=inputs_on_keybind_update\r\n    //% block=\"on keybind update do\"\r\n    //% group=\"Events\"\r\n    //% weight=49\r\n    //% draggableParameters=\"reporter\"\r\n    export function onKeybindUpdate(handler: (keys: string[]) => void): void {\r\n        keybindHandler = handler;\r\n    }\r\n"]]},{"start1":19399,"length1":122,"diffs":[[1,"    /**\r\n     * Display the current typed text on screen\r\n     */\r\n    //% blockId=inputs_show_typed_text\r\n    //% block=\"show typed text at x %x y %y || color %color font %font\"\r\n    //% group=\"Display\"\r\n    //% weight=40\r\n    //% inlineInputMode=inline\r\n    //% expandableArgumentMode=\"toggle\"\r\n    //% x.defl=80 y.defl=60\r\n    //% color.shadow=screen_image_picker\r\n    export function showTypedText(x: number, y: number, color?: number, font?: image.Font): void {\r\n        if (!color) color = 1;\r\n        if (!font) font = image.font8;\r\n        \r\n        screen.fillRect(0, y - 4, screen.width, font.charHeight + 8, 0);\r\n        screen.print(typedString, x, y, color, font);\r\n        \r\n        // Show cursor\r\n        if (Math.idiv(control.millis(), 500) % 2 === 0) {\r\n            const textWidth = typedString.length * font.charWidth;\r\n            screen.fillRect(x + textWidth, y, 1, font.charHeight, color);\r\n        }\r\n"]]},{"start1":20334,"length1":4,"diffs":[[1,""]]},{"start1":20495,"length1":0,"diffs":[[1,"    //% group=\"Utility\"\r\n    //% weight=30\r\n"]]},{"start1":20777,"length1":3,"diffs":[[1,"\r\n    /**\r\n     * Enable toggle recording with B button\r\n     */\r\n    //% blockId=inputs_enable_toggle_recording\r\n    //% block=\"enable toggle recording with B button\"\r\n    //% group=\"Utility\"\r\n    //% weight=29\r\n    export function enableToggleRecording(): void {\r\n        controller.B.onEvent(ControllerButtonEvent.Pressed, function() {\r\n            if (isRecording) {\r\n                stopRecording();\r\n                console.logValue(\"Recording\", \"Stopped\");\r\n            } else {\r\n                startRecording();\r\n                console.logValue(\"Recording\", \"Started\");\r\n            }\r\n        });\r\n    }\r\n}"]]}]}]},{"timestamp":1744469112609,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":11768,"length1":66,"diffs":[[1,"     * Clears the typed string and resets cursor and selection.\r\n     */\r\n    //% block=\"clear typed string\"\r\n    //% group=\"Text\"\r\n    //% weight=99\r\n"]]},{"start1":12131,"length1":39,"diffs":[[1,"    //% block=\"select all text\"\r\n    //% group=\"Text\"\r\n    //% weight=98\r\n    export function selectAll() {\r\n"]]},{"start1":12477,"length1":44,"diffs":[[1,"    //% block=\"delete selection\"\r\n    //% group=\"Text\"\r\n    //% weight=97\r\n    export function deleteSelection() {\r\n"]]},{"start1":12981,"length1":36,"diffs":[[1,"    //% block=\"undo\"\r\n    //% group=\"History\"\r\n    //% weight=96\r\n    export function undo() {\r\n"]]},{"start1":13351,"length1":36,"diffs":[[1,"    //% block=\"redo\"\r\n    //% group=\"History\"\r\n    //% weight=95\r\n    export function redo() {\r\n"]]},{"start1":13681,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":13846,"length1":0,"diffs":[[1,"     * \r\n"]]},{"start1":14003,"length1":67,"diffs":[[1,"    //% block=\"convert keybind %keybind\"\r\n    //% group=\"Debug\"\r\n    //% weight=89\r\n    export function convertKeybind(keybind: string[]): string {\r\n"]]},{"start1":14462,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":14615,"length1":0,"diffs":[[1,"    //% block=\"get debug info\"\r\n    //% group=\"Debug\"\r\n    //% weight=90\r\n"]]},{"start1":15065,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":15076,"length1":157,"diffs":[[1,"     * Start processing input and run a callback when the typed string updates.\r\n     * @param handler a function that receives the current typed string\r\n"]]},{"start1":15239,"length1":81,"diffs":[[1,"    //% blockId=inputs_start_key_logging \r\n    //% block=\"on typed key updates $str\"\r\n    //% str.defl=str\r\n    //% str.shadow=variable_get\r\n    //% draggableParameters\r\n    export function startKeyLogging(handler: (str: string) => void): void {\r\n"]]},{"start1":15748,"length1":81,"diffs":[[1,"                console.logValue(\"Active Keys\", inputs.convertKeybind(keys));\r\n"]]},{"start1":15975,"length1":0,"diffs":[[1,"\r\n\r\n"]]},{"start1":15988,"length1":62,"diffs":[[1,"     * Adds a menu button handler to clear the typed string\r\n"]]},{"start1":16058,"length1":0,"diffs":[[1,"    //% blockId=inputs_enable_clear_button \r\n    //% block=\"enable clear button\"\r\n"]]},{"start1":16378,"length1":441,"diffs":[[1,""]]}]}]},{"timestamp":1744470159293,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":12754,"length1":26,"diffs":[[1,"    export function undoChange() {\r\n"]]}]}]},{"timestamp":1744470172410,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":88,"length1":1728,"diffs":[[1,"        \"A\": browserEvents.A,\r\n        \"B\": browserEvents.B,\r\n        \"C\": browserEvents.C,\r\n        \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E,\r\n        \"F\": browserEvents.F,\r\n        \"G\": browserEvents.G,\r\n        \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I,\r\n        \"J\": browserEvents.J,\r\n        \"K\": browserEvents.K,\r\n        \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M,\r\n        \"N\": browserEvents.N,\r\n        \"O\": browserEvents.O,\r\n        \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q,\r\n        \"R\": browserEvents.R,\r\n        \"S\": browserEvents.S,\r\n        \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U,\r\n        \"V\": browserEvents.V,\r\n        \"W\": browserEvents.W,\r\n        \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y,\r\n        \"Z\": browserEvents.Z,\r\n        \"0\": browserEvents.Zero,\r\n        \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two,\r\n        \"3\": browserEvents.Three,\r\n        \"4\": browserEvents.Four,\r\n        \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six,\r\n        \"7\": browserEvents.Seven,\r\n        \"8\": browserEvents.Eight,\r\n        \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift,\r\n        \"Ctrl\": browserEvents.Control,\r\n        \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta,\r\n        \"Enter\": browserEvents.Enter,\r\n        \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock,\r\n        \"Space\": browserEvents.Space,\r\n        \"Backspace\": browserEvents.End,\r\n        \"ArrowUp\": browserEvents.ArrowUp,\r\n        \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft,\r\n        \"ArrowRight\": browserEvents.ArrowRight,\r\n        \"/\": browserEvents.ForwardSlash,\r\n        \"\\\\\": browserEvents.BackSlash,\r\n        \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period,\r\n        \"[\": browserEvents.OpenBracket,\r\n        \"]\": browserEvents.CloseBracket,\r\n        \"=\": browserEvents.Equals,\r\n        \";\": browserEvents.SemiColon,\r\n        \"-\": browserEvents.Hyphen,\r\n        \"`\": browserEvents.BackTick,\r\n        \"'\": browserEvents.Apostrophe,\r\n\r\n        // Add more keys if needed\r\n"]]},{"start1":2242,"length1":512,"diffs":[[1,"    let previousKeyStates: { [key: string]: boolean } = {}, typedString: string = \"\", cursorPosition: number = 0;\r\n    let history: string[] = [\"\"];\r\n    let historyIndex: number = 0;\r\n    const MAX_HISTORY = 99;\r\n    let keyBuffer: string[] = [];\r\n    const KEY_BUFFER_TIMEOUT = 100;\r\n    let selectionStart: number = 0;\r\n    let selectionEnd: number = 0;\r\n    let hasSelection: boolean = false;\r\n    // Key repeat settings \r\n    const KEY_REPEAT_DELAY = 700; // Initial delay in ms before key repeat starts\r\n    const KEY_REPEAT_RATE = 50;   // Interval in ms between repeated keypresses\r\n    let keyRepeatTimers: { [key: string]: number } = {}; // Store timer IDs for key repeat\r\n    let repeatingKeys: { [key: string]: boolean } = {}; // Track which keys are repeating\r\n"]]},{"start1":3018,"length1":192,"diffs":[[1,"    function initKeyStates() {\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            previousKeyStates[keyNames[i]] = false;\r\n            repeatingKeys[keyNames[i]] = false;\r\n        }\r\n    }\r\n    initKeyStates();\r\n"]]},{"start1":3340,"length1":177,"diffs":[[1,"        const pressed: string[] = [];\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const name = keyNames[i];\r\n            if (allKeys[name].isPressed()) {\r\n                pressed.push(name);\r\n            }\r\n        }\r\n        const modifierPriority = [\"Ctrl\", \"Alt\", \"Shift\", \"Meta\"];\r\n        pressed.sort((a, b) => {\r\n"]]},{"start1":3970,"length1":48,"diffs":[[1,"            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0;\r\n"]]},{"start1":4075,"length1":7,"diffs":[[1,""]]},{"start1":4077,"length1":0,"diffs":[[1,"        return pressed;\r\n    }\r\n"]]},{"start1":4252,"length1":47,"diffs":[[1,"        for (let i = 0; i < currentPressed.length; i++) {\r\n            const key = currentPressed[i];\r\n"]]},{"start1":4488,"length1":73,"diffs":[[1,"                if (!isModifierKey(key)) {\r\n                    startKeyRepeat(key);\r\n                }\r\n"]]},{"start1":4619,"length1":130,"diffs":[[1,"        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const key = keyNames[i];\r\n            if (currentPressed.indexOf(key) == -1 && previousKeyStates[key]) {\r\n"]]},{"start1":4939,"length1":15,"diffs":[[1,"        }\r\n"]]},{"start1":4989,"length1":0,"diffs":[[1,"    function isModifierKey(key: string): boolean {\r\n        return [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"].indexOf(key) !== -1;\r\n    }\r\n\r\n"]]},{"start1":5772,"length1":69,"diffs":[[1,"                            typedString = typedString.substr(0, typedString.length - 1);\r\n"]]},{"start1":6144,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":6465,"length1":0,"diffs":[[1,"    function checkKeyCombination(keys: string[], combo: string[]): boolean {\r\n        if (keys.length !== combo.length) return false;\r\n        for (let i = 0; i < combo.length; i++) {\r\n            if (keys.indexOf(combo[i]) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n"]]},{"start1":7413,"length1":2,"diffs":[[1,""]]},{"start1":7467,"length1":282,"diffs":[[1,"            if (newKeys.indexOf(\"Z\") !== -1) {\r\n                undo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"Y\") !== -1) {\r\n                redo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"A\") !== -1) {\r\n                selectAll();\r\n                return;\r\n            }\r\n            // TODO: implement clipboard\r\n            if (newKeys.indexOf(\"X\") !== -1) {\r\n                // Would cut to clipboard\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"C\") !== -1) {\r\n                // Would copy to clipboard\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"V\") !== -1) {\r\n                // Would paste from clipboard\r\n                return;\r\n            }\r\n"]]},{"start1":8385,"length1":161,"diffs":[[1,"            } else {\r\n                if (typedString.length > 0) {\r\n                    typedString = typedString.substr(0, typedString.length - 1);\r\n                    cursorPosition = typedString.length;\r\n                }\r\n"]]},{"start1":8690,"length1":0,"diffs":[[1,"        const modifiers = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n        const nonModifiers = newKeys.filter(k => (modifiers.indexOf(k) == -1));\r\n"]]},{"start1":8834,"length1":80,"diffs":[[1,""]]},{"start1":8882,"length1":89,"diffs":[[1,"        if (hasSelection) {\r\n            deleteSelection();\r\n        }\r\n        for (let i = 0; i < nonModifiers.length; i++) {\r\n            let key = nonModifiers[i];\r\n"]]},{"start1":9237,"length1":13,"diffs":[[1,"        }\r\n"]]},{"start1":9432,"length1":0,"diffs":[[1,"\r\n"]]},{"start1":11768,"length1":151,"diffs":[[1," * Clears the typed string and resets cursor and selection.\r\n */\r\n"]]},{"start1":12046,"length1":109,"diffs":[[1,"    export function selectAllText() {\r\n"]]},{"start1":12322,"length1":116,"diffs":[[1,"    export function deleteSelectedText() {\r\n"]]},{"start1":12527,"length1":81,"diffs":[[1,"\r\n            typedString = typedString.substr(0, start) + typedString.substr(end);\r\n"]]},{"start1":12754,"length1":96,"diffs":[[1,"    export function () {\r\n"]]},{"start1":13054,"length1":96,"diffs":[[1,"    export function redoChange() {\r\n"]]},{"start1":13487,"length1":9,"diffs":[[1,""]]},{"start1":13635,"length1":370,"diffs":[[1,"    export function getKeybindString(keybind: string[]): string {\r\n        if (keybind.length == 0) return \"\";\r\n\r\n        if (keybind.length == 1 && keybind[0].length == 1) {\r\n            return keybind[0].toLowerCase();\r\n        } else if (keybind.length == 2 && keybind[0] == \"Shift\") {\r\n            return keybind[1];\r\n        }\r\n"]]},{"start1":14163,"length1":74,"diffs":[[1,""]]},{"start1":14209,"length1":206,"diffs":[[1,"        let info = \"\";\r\n        info += `Text: \"${typedString}\"\\n`;\r\n        info += `Cursor: ${cursorPosition}\\n`;\r\n        info += `History: ${historyIndex + 1}/${history.length}\\n`;\r\n\r\n        if (hasSelection) {\r\n            info += `Selection: ${selectionStart}-${selectionEnd}`;\r\n        }\r\n\r\n"]]},{"start1":14714,"length1":289,"diffs":[[1,"    export function onTypedStringUpdate(handler: (str: string) => void): void {\r\n        game.onUpdate(inputs.processKeyBuffer);\r\n"]]},{"start1":14894,"length1":45,"diffs":[[1,"            const typed = inputs.getTypedString();\r\n"]]},{"start1":14977,"length1":126,"diffs":[[1,"            const keys = inputs.currentKeys();\r\n            if (keys.length) {\r\n                console.logValue(\"Active Keys\", inputs.getKeybindString(keys));\r\n            }\r\n"]]},{"start1":15202,"length1":55,"diffs":[[1,"            console.logValue(\"Info\", inputs.getDebugInfo());\r\n"]]},{"start1":15366,"length1":82,"diffs":[[1,""]]},{"start1":15493,"length1":33,"diffs":[[1,"            inputs.clearTypedString();\r\n"]]},{"start1":15604,"length1":1,"diffs":[[1,"\r\n    /**\r\n     * Retrieves the current cursor position.\r\n     */\r\n    export function getCursorPosition(): number {\r\n        return cursorPosition;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current selection range if active.\r\n     */\r\n    export function getSelectionRange(): string {\r\n        if (hasSelection) {\r\n            return `Selection: ${selectionStart}-${selectionEnd}`;\r\n        }\r\n        return \"No selection active\";\r\n    }\r\n\r\n}\r\n"]]}]}]},{"timestamp":1744470912439,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1744470945049,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1288,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"*i5KB*0r-#ORXO14U*g4\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"+QQ`[swoZ!V@(h9/:7y-\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tN.$_%pK|1H*-]+oCcpK\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"e3n5nd/G*/z{eH]5!w1I\">Enemy</variable><variable id=\"V26nNE38QL$jrIF,{~T8\">mySprite</variable><variable id=\"jNH:PJG8=.6*RQtAL4|*\">str</variable><variable id=\"k^_q?DasJ1QvCZzr^U?(\">mySprite2</variable><variable id=\"i|d/=E^_Jp!IW.%ktnNj\">list</variable></variables><block type=\"pxt-on-start\" x=\"34\" y=\"71\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\"><mutation items=\"1\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"text\"><field name=\"TEXT\"></field></block></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1818,"length1":1778,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"94\" y=\"274\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"browserEvents_key_isPressed\"><field name=\"this\">browserEvents.Enter</field></block></value><statement name=\"DO0\"><block type=\"array_push\"><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field></block></value><value name=\"value\"><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><next><block type=\"inputs_clearTypedString\"></block></next></block></statement><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">:)</field></shadow><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><value name=\"timeOnScreen\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><value name=\"animated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1744485399215,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":0,"diffs":[[1,"    if (browserEvents.Enter.isPressed()) {\n        list.push(str)\n        inputs.clearTypedString()\n    }\n"]]},{"start1":203,"length1":16,"diffs":[[1,"let list: string[] = []\nlist = [\"\"]\n"]]}]}]},{"timestamp":1744485411757,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":1816,"length1":1167,"diffs":[[1,"`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"60\" y=\"203\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"browserEvents_key_isPressed\"><field name=\"this\">browserEvents.Enter</field></block></value><statement name=\"DO0\"><block type=\"array_push\"><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field></block></value><value name=\"value\"><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><next><block type=\"inputs_clearTypedString\"></block></next></block></statement><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">:)</field></shadow><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><value name=\"timeOnScreen\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><value name=\"animated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":20,"length1":160,"diffs":[[1,""]]},{"start1":2117,"length1":57,"diffs":[[1,"    const KEY_REPEAT_DELAY = 450, KEY_REPEAT_RATE = 50;\r\n"]]},{"start1":2529,"length1":227,"diffs":[[1,""]]},{"start1":2531,"length1":415,"diffs":[[1,""]]},{"start1":13786,"length1":1016,"diffs":[[1,""]]}]}]},{"timestamp":1744486002809,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1236,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"*i5KB*0r-#ORXO14U*g4\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"+QQ`[swoZ!V@(h9/:7y-\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tN.$_%pK|1H*-]+oCcpK\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"e3n5nd/G*/z{eH]5!w1I\">Enemy</variable><variable id=\"V26nNE38QL$jrIF,{~T8\">mySprite</variable><variable id=\"jNH:PJG8=.6*RQtAL4|*\">str</variable><variable id=\"k^_q?DasJ1QvCZzr^U?(\">mySprite2</variable><variable id=\"i|d/=E^_Jp!IW.%ktnNj\">list</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\"><mutation items=\"1\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"text\"><field name=\"TEXT\"></field></block></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n"]]},{"start1":1354,"length1":496,"diffs":[[1,". . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"60\" y=\"203\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><statement name=\"HANDLER\"><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">:)</field></shadow><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><value name=\"timeOnScreen\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><value name=\"animated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":2,"diffs":[[1,"    mySprite.sayText(str)\n"]]},{"start1":69,"length1":0,"diffs":[[1,"let mySprite: Sprite = null\n"]]},{"start1":113,"length1":35,"diffs":[[1,"mySprite = sprites.create(img`\n"]]},{"start1":218,"length1":0,"diffs":[[1,"    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n"]]}]},{"type":"edited","filename":"MoreBrowserEvents.ts","patch":[{"start1":20,"length1":0,"diffs":[[1,"    // Add these new variables to manage key handlers\r\n    let keyHandlers: { [key: string]: (() => void)[] } = {};\r\n    let keyHandlersInitialized = false;\r\n"]]},{"start1":2689,"length1":0,"diffs":[[1,"    /**\r\n     * Set up the key handlers system\r\n     */\r\n    function initKeyHandlers() {\r\n        // Only register the update handler once\r\n        game.onUpdate(function () {\r\n            const newKeys = newlyPressedKeys();\r\n"]]},{"start1":2918,"length1":0,"diffs":[[1,"            // For each newly pressed key, execute all registered handlers\r\n            for (const key of newKeys) {\r\n                const handlers = keyHandlers[key];\r\n                if (handlers) {\r\n                    for (const handler of handlers) {\r\n                        handler();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        keyHandlersInitialized = true;\r\n    }\r\n\r\n"]]},{"start1":13941,"length1":0,"diffs":[[1,"\r\n            const keys = currentKeys();\r\n            if (keys.length) console.logValue(\"Active Keys\", convertKeybind(keys));\r\n\r\n            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", getDebugInfo());\r\n"]]},{"start1":14517,"length1":0,"diffs":[[1,"            console.logValue(\"Typed\", \"Cleared\");\r\n"]]},{"start1":14588,"length1":0,"diffs":[[1,"    \r\n\r\n    /**\r\n     * Executes the handler when a specific key is pressed.\r\n     * @param key The key to detect\r\n     * @param handler Code to run when the key is pressed\r\n     */\r\n    //% blockId=inputs_is_key_pressed\r\n    //% block=\"when %key|is pressed do\"\r\n    //% key.fieldEditor=\"autocomplete\" \r\n    //% key.fieldOptions.decompileLiterals=true\r\n    //% key.fieldOptions.values=\"A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,0,1,2,3,4,5,6,7,8,9,Enter,Space,Backspace,Tab,ArrowUp,ArrowDown,ArrowLeft,ArrowRight,Shift,Ctrl,Alt\"\r\n    //% handlerStatement\r\n    export function isKeyPressed(key: string, handler: () => void) {\r\n        // Initialize the key handlers system if needed\r\n        if (!keyHandlersInitialized) {\r\n            initKeyHandlers();\r\n        }\r\n\r\n        // Create array for this key if it doesn't exist\r\n        if (!keyHandlers[key]) {\r\n            keyHandlers[key] = [];\r\n        }\r\n\r\n        // Add the handler to the array\r\n        keyHandlers[key].push(handler);\r\n    }\r\n\r\n    \r\n"]]}]}]},{"timestamp":1744486515759,"editorVersion":"2.0.53","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":545,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"Tpf%(4I9{j3TA,TH.b*-\">str</variable><variable id=\"B~0B53_L2z1.c8y2n]3c\">mySprite</variable><variable id=\"~H)KN-sZdK%1%3HNmd0R\">list</variable><variable type=\"KIND_SpriteKind\" id=\"]%=UOVJ$HcPwm?3IeraG\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"l@cIF,-SW014{@::MBxk\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"$,dF8wm:GANWFrWUK][!\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"FyN.pRC4u`XiqWv+$*FK\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"34\" y=\"64\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"~H)KN-sZdK%1%3HNmd0R\">list</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\"><mutation items=\"1\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"B~0B53_L2z1.c8y2n]3c\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"250\" y=\"353\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"Tpf%(4I9{j3TA,TH.b*-\">str</field></block></value></block></xml>"]]}]}]},{"timestamp":1745886062764,"editorVersion":"2.0.53","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":294,"length1":44,"diffs":[[1,""]]}]}]}],"snapshots":[{"timestamp":1743112514638,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1743114397649,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace TypeSimulator {\r\n    let currentText = \"\"\r\n    let isShiftPressed = false\r\n    let lastPressedKey: number | null = null\r\n\r\n    // Predefined keys for typing\r\n    const typingKeys = [\r\n        browserEvents.A, browserEvents.B, browserEvents.C, browserEvents.D, browserEvents.E,\r\n        browserEvents.F, browserEvents.G, browserEvents.H, browserEvents.I, browserEvents.J,\r\n        browserEvents.K, browserEvents.L, browserEvents.M, browserEvents.N, browserEvents.O,\r\n        browserEvents.P, browserEvents.Q, browserEvents.R, browserEvents.S, browserEvents.T,\r\n        browserEvents.U, browserEvents.V, browserEvents.W, browserEvents.X, browserEvents.Y,\r\n        browserEvents.Z,\r\n        browserEvents.Zero, browserEvents.One, browserEvents.Two, browserEvents.Three,\r\n        browserEvents.Four, browserEvents.Five, browserEvents.Six, browserEvents.Seven,\r\n        browserEvents.Eight, browserEvents.Nine,\r\n        browserEvents.Space, browserEvents.SemiColon, browserEvents.Apostrophe,\r\n        browserEvents.Comma, browserEvents.Period, browserEvents.ForwardSlash\r\n    ]\r\n\r\n    // Track Shift state\r\n    browserEvents.Shift.onEvent(browserEvents.KeyEvent.Pressed, function () {\r\n        isShiftPressed = true\r\n    })\r\n\r\n    browserEvents.Shift.onEvent(browserEvents.KeyEvent.Released, function () {\r\n        isShiftPressed = false\r\n    })\r\n\r\n    game.onUpdate(function () {\r\n        typingKeys.forEach(key => {\r\n            if (key.isPressed() && key.id !== lastPressedKey) {\r\n                let keyChar = browserEvents.keyToString(key.id)\r\n\r\n                // Convert to uppercase if Shift is pressed\r\n                if (isShiftPressed) {\r\n                    keyChar = keyChar.toUpperCase()\r\n                }\r\n\r\n                // Only update with the latest key\r\n                currentText = keyChar\r\n                lastPressedKey = key.id\r\n                console.log(currentText)\r\n            }\r\n        })\r\n    })\r\n}","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1744057434107,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace inputs {\r\n    const allKeys: { [name: string]: browserEvents.KeyButton } = {\r\n        \"A\": browserEvents.A,\r\n        \"B\": browserEvents.B,\r\n        \"C\": browserEvents.C,\r\n        \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E,\r\n        \"F\": browserEvents.F,\r\n        \"G\": browserEvents.G,\r\n        \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I,\r\n        \"J\": browserEvents.J,\r\n        \"K\": browserEvents.K,\r\n        \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M,\r\n        \"N\": browserEvents.N,\r\n        \"O\": browserEvents.O,\r\n        \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q,\r\n        \"R\": browserEvents.R,\r\n        \"S\": browserEvents.S,\r\n        \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U,\r\n        \"V\": browserEvents.V,\r\n        \"W\": browserEvents.W,\r\n        \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y,\r\n        \"Z\": browserEvents.Z,\r\n        \"0\": browserEvents.Zero,\r\n        \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two,\r\n        \"3\": browserEvents.Three,\r\n        \"4\": browserEvents.Four,\r\n        \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six,\r\n        \"7\": browserEvents.Seven,\r\n        \"8\": browserEvents.Eight,\r\n        \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift,\r\n        \"Ctrl\": browserEvents.Control,\r\n        \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta,\r\n        \"Enter\": browserEvents.Enter,\r\n        \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock,\r\n        \"Space\": browserEvents.Space,\r\n        \"Backspace\": browserEvents.End, // change to Backspace once its added if it is, otherwise, ill use an other key like this\r\n        \"ArrowUp\": browserEvents.ArrowUp,\r\n        \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft,\r\n        \"ArrowRight\": browserEvents.ArrowRight,\r\n\r\n        \"/\": browserEvents.ForwardSlash,\r\n        \"\\\\\": browserEvents.BackSlash,\r\n        \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period\r\n\r\n        // Add more keys if needed\r\n    }\r\n\r\n    let previousKeyStates: { [key: string]: boolean } = {}, typedString: string = \"\", cursorPosition: number = 0;\r\n    let history: string[] = [\"\"];\r\n    let historyIndex: number = 0;\r\n    const MAX_HISTORY = 50;\r\n    let keyBuffer: string[] = [];\r\n    const KEY_BUFFER_TIMEOUT = 100;\r\n    let selectionStart: number = 0;\r\n    let selectionEnd: number = 0;\r\n    let hasSelection: boolean = false;\r\n    function initKeyStates() {\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            previousKeyStates[keyNames[i]] = false;\r\n        }\r\n    }\r\n    initKeyStates();\r\n\r\n    /**\r\n     * Returns currently pressed keys as an array\r\n     */\r\n    export function currentKeys(): string[] {\r\n        const pressed: string[] = [];\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const name = keyNames[i];\r\n            if (allKeys[name].isPressed()) {\r\n                pressed.push(name);\r\n            }\r\n        }\r\n        const modifierPriority = [\"Ctrl\", \"Alt\", \"Shift\", \"Meta\"];\r\n        pressed.sort((a, b) => {\r\n            const ai = modifierPriority.indexOf(a);\r\n            const bi = modifierPriority.indexOf(b);\r\n            if (ai !== -1 && bi !== -1) return ai - bi;\r\n            if (ai !== -1) return -1;\r\n            if (bi !== -1) return 1;\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0;\r\n        });\r\n\r\n        return pressed;\r\n    }\r\n    /**\r\n     * Detects newly pressed keys since last check\r\n     */\r\n    export function newlyPressedKeys(): string[] {\r\n        const currentPressed = currentKeys();\r\n        const newlyPressed: string[] = [];\r\n        for (let i = 0; i < currentPressed.length; i++) {\r\n            const key = currentPressed[i];\r\n            if (!previousKeyStates[key]) {\r\n                newlyPressed.push(key);\r\n                previousKeyStates[key] = true;\r\n            }\r\n        }\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const key = keyNames[i];\r\n            if (currentPressed.indexOf(key) == -1) {\r\n                previousKeyStates[key] = false;\r\n            }\r\n        }\r\n        return newlyPressed;\r\n    }\r\n\r\n    /**\r\n     * Checks if a key combination matches the pressed keys\r\n     */\r\n    function checkKeyCombination(keys: string[], combo: string[]): boolean {\r\n        if (keys.length !== combo.length) return false;\r\n        for (let i = 0; i < combo.length; i++) {\r\n            if (keys.indexOf(combo[i]) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Save current state to history\r\n     */\r\n    function saveToHistory() {\r\n        if (history[historyIndex] !== typedString) {\r\n            if (historyIndex < history.length - 1) {\r\n                history = history.slice(0, historyIndex + 1);\r\n            }\r\n            history.push(typedString);\r\n            historyIndex = history.length - 1;\r\n            if (history.length > MAX_HISTORY) {\r\n                history.shift();\r\n                historyIndex--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds newly pressed keys to the buffer and handles shortcuts\r\n     */\r\n    export function processKeyBuffer() {\r\n        const currentPressed = currentKeys();\r\n        const newKeys = newlyPressedKeys();\r\n        if (newKeys.length === 0) return;\r\n        if (currentPressed.indexOf(\"Ctrl\") !== -1) {\r\n            if (newKeys.indexOf(\"Z\") !== -1) {\r\n                undo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"Y\") !== -1) {\r\n                redo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"A\") !== -1) {\r\n                selectAll();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"X\") !== -1) {\r\n                if (hasSelection) {\r\n                    deleteSelection();\r\n                    saveToHistory();\r\n                }\r\n                return;\r\n            }\r\n            // TODO: implement clipboard\r\n            if (newKeys.indexOf(\"C\") !== -1) {\r\n                // Would copy to clipboard, but that's not available\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"V\") !== -1) {\r\n                // Would paste from clipboard, but that's not available\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (newKeys.indexOf(\"Backspace\") !== -1) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            } else {\r\n                if (typedString.length > 0) {\r\n                    typedString = typedString.substr(0, typedString.length - 1);\r\n                    cursorPosition = typedString.length;\r\n                }\r\n            }\r\n            saveToHistory();\r\n            return;\r\n        }\r\n        const modifiers = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n        const nonModifiers = newKeys.filter(k => (modifiers.indexOf(k) == -1));\r\n\r\n        if (nonModifiers.length === 0) return;\r\n        if (hasSelection) {\r\n            deleteSelection();\r\n        }\r\n        for (let i = 0; i < nonModifiers.length; i++) {\r\n            let key = nonModifiers[i];\r\n            const char = keyToChar(key);\r\n            if (char) {\r\n                keyBuffer.push(char);\r\n                setTimeout(flushKeyBuffer, KEY_BUFFER_TIMEOUT);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flushes key buffer to typed string\r\n     */\r\n    export function flushKeyBuffer() {\r\n        if (keyBuffer.length > 0) {\r\n            typedString += keyBuffer.join('');\r\n            cursorPosition = typedString.length;\r\n\r\n            keyBuffer = [];\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a key name to character, handling Shift key\r\n     */\r\n    export function keyToChar(key: string): string {\r\n        if (key === \"Space\") return \" \";\r\n        if (key === \"Enter\") return \"\\n\";\r\n        if (key === \"Tab\") return \"\\t\";\r\n        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") { // keys that dont change anything\r\n            return \"\";\r\n        }\r\n        const shiftPressed = previousKeyStates[\"Shift\"];\r\n        if (key.length === 1 && key >= \"A\" && key <= \"Z\") { // letters\r\n            return shiftPressed ? key : key.toLowerCase();\r\n        }\r\n        if (key.length === 1 && key >= \"0\" && key <= \"9\") { // numbers\r\n            if (shiftPressed) {\r\n                const shiftNumberMap: { [key: string]: string } = { // just defining a variable when i need to\r\n                    \"1\": \"!\",\r\n                    \"2\": \"@\",\r\n                    \"3\": \"#\",\r\n                    \"4\": \"$\",\r\n                    \"5\": \"%\",\r\n                    \"6\": \"?\",\r\n                    \"7\": \"&\",\r\n                    \"8\": \"*\",\r\n                    \"9\": \"(\",\r\n                    \"0\": \")\"\r\n                };\r\n                return shiftNumberMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets the typed string\r\n     */\r\n    export function getTypedString(): string {\r\n        return typedString;\r\n    }\r\n    /**\r\n     * Clears the typed string\r\n     */\r\n    export function clearTypedString() {\r\n        typedString = \"\";\r\n        cursorPosition = 0;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Select all text\r\n     */\r\n    export function selectAll() {\r\n        if (typedString.length > 0) {\r\n            selectionStart = 0;\r\n            selectionEnd = typedString.length;\r\n            hasSelection = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the current selection\r\n     */\r\n    export function deleteSelection() {\r\n        if (hasSelection) {\r\n            const start = Math.min(selectionStart, selectionEnd);\r\n            const end = Math.max(selectionStart, selectionEnd);\r\n\r\n            typedString = typedString.substr(0, start) + typedString.substr(end);\r\n            cursorPosition = start;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undo the last action\r\n     */\r\n    export function undo() {\r\n        if (historyIndex > 0) {\r\n            historyIndex--;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redo the last undone action\r\n     */\r\n    export function redo() {\r\n        if (historyIndex < history.length - 1) {\r\n            historyIndex++;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts keybind array to string representation\r\n     */\r\n    export function convertKeybind(keybind: string[]): string {\r\n        if (keybind.length == 0) return \"\";\r\n\r\n        if (keybind.length == 1 && keybind[0].length == 1) {\r\n            return keybind[0].toLowerCase();\r\n        } else if (keybind.length == 2 && keybind[0] == 'Shift') {\r\n            return keybind[1];\r\n        }\r\n        return keybind.join('+');\r\n    }\r\n\r\n    /**\r\n     * Get debug info as string\r\n     */\r\n    export function getDebugInfo(): string {\r\n        let info = \"\";\r\n        info += `Text: \"${typedString}\"\\n`;\r\n        info += `Cursor: ${cursorPosition}\\n`;\r\n        info += `History: ${historyIndex + 1}/${history.length}\\n`;\r\n\r\n        if (hasSelection) {\r\n            info += `Selection: ${selectionStart}-${selectionEnd}`;\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * Start processing input and run a callback when the typed string updates.\r\n     * @param callback a function that receives the current typed string\r\n     */\r\n    //% blockId=inputs_start_key_logging block=\"start key logging and run $callback\"\r\n    //% callbackShadow=variables_set\r\n    export function startKeyLogging(callback: (typed: string) => void): void {\r\n        game.onUpdate(inputs.processKeyBuffer);\r\n\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = inputs.getTypedString();\r\n            callback(typed);\r\n\r\n            const keys = inputs.currentKeys();\r\n            if (keys.length) {\r\n                console.logValue(\"Active Keys\", inputs.convertKeybind(keys));\r\n            }\r\n\r\n            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", inputs.getDebugInfo());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a menu button handler to clear the typed string\r\n     */\r\n    //% blockId=inputs_enable_clear_button block=\"enable clear button\"\r\n    export function enableClearButton(): void {\r\n        controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n            inputs.clearTypedString();\r\n            console.logValue(\"Typed\", \"Cleared\");\r\n        });\r\n    }\r\n}\r\n","test.ts":"// Tests are here\r\n\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\",\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1744221888616,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace inputs {\r\n    const allKeys: { [name: string]: browserEvents.KeyButton } = {\r\n        \"A\": browserEvents.A,\r\n        \"B\": browserEvents.B,\r\n        \"C\": browserEvents.C,\r\n        \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E,\r\n        \"F\": browserEvents.F,\r\n        \"G\": browserEvents.G,\r\n        \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I,\r\n        \"J\": browserEvents.J,\r\n        \"K\": browserEvents.K,\r\n        \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M,\r\n        \"N\": browserEvents.N,\r\n        \"O\": browserEvents.O,\r\n        \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q,\r\n        \"R\": browserEvents.R,\r\n        \"S\": browserEvents.S,\r\n        \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U,\r\n        \"V\": browserEvents.V,\r\n        \"W\": browserEvents.W,\r\n        \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y,\r\n        \"Z\": browserEvents.Z,\r\n        \"0\": browserEvents.Zero,\r\n        \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two,\r\n        \"3\": browserEvents.Three,\r\n        \"4\": browserEvents.Four,\r\n        \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six,\r\n        \"7\": browserEvents.Seven,\r\n        \"8\": browserEvents.Eight,\r\n        \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift,\r\n        \"Ctrl\": browserEvents.Control,\r\n        \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta,\r\n        \"Enter\": browserEvents.Enter,\r\n        \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock,\r\n        \"Space\": browserEvents.Space,\r\n        \"Backspace\": browserEvents.End, // change to Backspace once its added if it is, otherwise, ill use an other key like this\r\n        \"ArrowUp\": browserEvents.ArrowUp,\r\n        \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft,\r\n        \"ArrowRight\": browserEvents.ArrowRight,\r\n\r\n        \"/\": browserEvents.ForwardSlash,\r\n        \"\\\\\": browserEvents.BackSlash,\r\n        \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period\r\n\r\n        // Add more keys if needed\r\n    }\r\n\r\n    let previousKeyStates: { [key: string]: boolean } = {}, typedString: string = \"\", cursorPosition: number = 0;\r\n    let history: string[] = [\"\"];\r\n    let historyIndex: number = 0;\r\n    const MAX_HISTORY = 50;\r\n    let keyBuffer: string[] = [];\r\n    const KEY_BUFFER_TIMEOUT = 100;\r\n    let selectionStart: number = 0;\r\n    let selectionEnd: number = 0;\r\n    let hasSelection: boolean = false;\r\n    function initKeyStates() {\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            previousKeyStates[keyNames[i]] = false;\r\n        }\r\n    }\r\n    initKeyStates();\r\n\r\n    /**\r\n     * Returns currently pressed keys as an array\r\n     */\r\n    export function currentKeys(): string[] {\r\n        const pressed: string[] = [];\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const name = keyNames[i];\r\n            if (allKeys[name].isPressed()) {\r\n                pressed.push(name);\r\n            }\r\n        }\r\n        const modifierPriority = [\"Ctrl\", \"Alt\", \"Shift\", \"Meta\"];\r\n        pressed.sort((a, b) => {\r\n            const ai = modifierPriority.indexOf(a);\r\n            const bi = modifierPriority.indexOf(b);\r\n            if (ai !== -1 && bi !== -1) return ai - bi;\r\n            if (ai !== -1) return -1;\r\n            if (bi !== -1) return 1;\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0;\r\n        });\r\n\r\n        return pressed;\r\n    }\r\n    /**\r\n     * Detects newly pressed keys since last check\r\n     */\r\n    export function newlyPressedKeys(): string[] {\r\n        const currentPressed = currentKeys();\r\n        const newlyPressed: string[] = [];\r\n        for (let i = 0; i < currentPressed.length; i++) {\r\n            const key = currentPressed[i];\r\n            if (!previousKeyStates[key]) {\r\n                newlyPressed.push(key);\r\n                previousKeyStates[key] = true;\r\n            }\r\n        }\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const key = keyNames[i];\r\n            if (currentPressed.indexOf(key) == -1) {\r\n                previousKeyStates[key] = false;\r\n            }\r\n        }\r\n        return newlyPressed;\r\n    }\r\n\r\n    /**\r\n     * Checks if a key combination matches the pressed keys\r\n     */\r\n    function checkKeyCombination(keys: string[], combo: string[]): boolean {\r\n        if (keys.length !== combo.length) return false;\r\n        for (let i = 0; i < combo.length; i++) {\r\n            if (keys.indexOf(combo[i]) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Save current state to history\r\n     */\r\n    function saveToHistory() {\r\n        if (history[historyIndex] !== typedString) {\r\n            if (historyIndex < history.length - 1) {\r\n                history = history.slice(0, historyIndex + 1);\r\n            }\r\n            history.push(typedString);\r\n            historyIndex = history.length - 1;\r\n            if (history.length > MAX_HISTORY) {\r\n                history.shift();\r\n                historyIndex--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds newly pressed keys to the buffer and handles shortcuts\r\n     */\r\n    export function processKeyBuffer() {\r\n        const currentPressed = currentKeys();\r\n        const newKeys = newlyPressedKeys();\r\n        if (newKeys.length === 0) return;\r\n        if (currentPressed.indexOf(\"Ctrl\") !== -1) {\r\n            if (newKeys.indexOf(\"Z\") !== -1) {\r\n                undo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"Y\") !== -1) {\r\n                redo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"A\") !== -1) {\r\n                selectAll();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"X\") !== -1) {\r\n                if (hasSelection) {\r\n                    deleteSelection();\r\n                    saveToHistory();\r\n                }\r\n                return;\r\n            }\r\n            // TODO: implement clipboard\r\n            if (newKeys.indexOf(\"C\") !== -1) {\r\n                // Would copy to clipboard, but that's not available\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"V\") !== -1) {\r\n                // Would paste from clipboard, but that's not available\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (newKeys.indexOf(\"Backspace\") !== -1) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            } else {\r\n                if (typedString.length > 0) {\r\n                    typedString = typedString.substr(0, typedString.length - 1);\r\n                    cursorPosition = typedString.length;\r\n                }\r\n            }\r\n            saveToHistory();\r\n            return;\r\n        }\r\n        const modifiers = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n        const nonModifiers = newKeys.filter(k => (modifiers.indexOf(k) == -1));\r\n\r\n        if (nonModifiers.length === 0) return;\r\n        if (hasSelection) {\r\n            deleteSelection();\r\n        }\r\n        for (let i = 0; i < nonModifiers.length; i++) {\r\n            let key = nonModifiers[i];\r\n            const char = keyToChar(key);\r\n            if (char) {\r\n                keyBuffer.push(char);\r\n                setTimeout(flushKeyBuffer, KEY_BUFFER_TIMEOUT);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flushes key buffer to typed string\r\n     */\r\n    export function flushKeyBuffer() {\r\n        if (keyBuffer.length > 0) {\r\n            typedString += keyBuffer.join('');\r\n            cursorPosition = typedString.length;\r\n\r\n            keyBuffer = [];\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a key name to character, handling Shift key\r\n     */\r\n    export function keyToChar(key: string): string {\r\n        if (key === \"Space\") return \" \";\r\n        if (key === \"Enter\") return \"\\n\";\r\n        if (key === \"Tab\") return \"\\t\";\r\n        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") { // keys that dont change anything\r\n            return \"\";\r\n        }\r\n        const shiftPressed = previousKeyStates[\"Shift\"];\r\n        if (key.length === 1 && key >= \"A\" && key <= \"Z\") { // letters\r\n            return shiftPressed ? key : key.toLowerCase();\r\n        }\r\n        if (key.length === 1 && key >= \"0\" && key <= \"9\") { // numbers\r\n            if (shiftPressed) {\r\n                const shiftNumberMap: { [key: string]: string } = { // just defining a variable when i need to\r\n                    \"1\": \"!\",\r\n                    \"2\": \"@\",\r\n                    \"3\": \"#\",\r\n                    \"4\": \"$\",\r\n                    \"5\": \"%\",\r\n                    \"6\": \"?\",\r\n                    \"7\": \"&\",\r\n                    \"8\": \"*\",\r\n                    \"9\": \"(\",\r\n                    \"0\": \")\"\r\n                };\r\n                return shiftNumberMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets the typed string\r\n     */\r\n    export function getTypedString(): string {\r\n        return typedString;\r\n    }\r\n    /**\r\n     * Clears the typed string\r\n     */\r\n    export function clearTypedString() {\r\n        typedString = \"\";\r\n        cursorPosition = 0;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Select all text\r\n     */\r\n    export function selectAll() {\r\n        if (typedString.length > 0) {\r\n            selectionStart = 0;\r\n            selectionEnd = typedString.length;\r\n            hasSelection = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the current selection\r\n     */\r\n    export function deleteSelection() {\r\n        if (hasSelection) {\r\n            const start = Math.min(selectionStart, selectionEnd);\r\n            const end = Math.max(selectionStart, selectionEnd);\r\n\r\n            typedString = typedString.substr(0, start) + typedString.substr(end);\r\n            cursorPosition = start;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undo the last action\r\n     */\r\n    export function undo() {\r\n        if (historyIndex > 0) {\r\n            historyIndex--;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redo the last undone action\r\n     */\r\n    export function redo() {\r\n        if (historyIndex < history.length - 1) {\r\n            historyIndex++;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts keybind array to string representation\r\n     */\r\n    export function convertKeybind(keybind: string[]): string {\r\n        if (keybind.length == 0) return \"\";\r\n\r\n        if (keybind.length == 1 && keybind[0].length == 1) {\r\n            return keybind[0].toLowerCase();\r\n        } else if (keybind.length == 2 && keybind[0] == 'Shift') {\r\n            return keybind[1];\r\n        }\r\n        return keybind.join('+');\r\n    }\r\n\r\n    /**\r\n     * Get debug info as string\r\n     */\r\n    export function getDebugInfo(): string {\r\n        let info = \"\";\r\n        info += `Text: \"${typedString}\"\\n`;\r\n        info += `Cursor: ${cursorPosition}\\n`;\r\n        info += `History: ${historyIndex + 1}/${history.length}\\n`;\r\n\r\n        if (hasSelection) {\r\n            info += `Selection: ${selectionStart}-${selectionEnd}`;\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * Start processing input and run a callback when the typed string updates.\r\n     * @param callback a function that receives the current typed string\r\n     */\r\n    //% blockId=inputs_start_key_logging block=\"start key logging and run $callback\"\r\n    //% callbackShadow=variables_set\r\n    export function startKeyLogging(callback: (typed: string) => void): void {\r\n        game.onUpdate(inputs.processKeyBuffer);\r\n\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = inputs.getTypedString();\r\n            callback(typed);\r\n\r\n            const keys = inputs.currentKeys();\r\n            if (keys.length) {\r\n                console.logValue(\"Active Keys\", inputs.convertKeybind(keys));\r\n            }\r\n\r\n            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", inputs.getDebugInfo());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a menu button handler to clear the typed string\r\n     */\r\n    //% blockId=inputs_enable_clear_button block=\"enable clear button\"\r\n    export function enableClearButton(): void {\r\n        controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n            inputs.clearTypedString();\r\n            console.logValue(\"Typed\", \"Cleared\");\r\n        });\r\n    }\r\n}\r\n","test.ts":"// Tests are here\r\n\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\",\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1744317242606,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\".fmAm}cP[4CvW@RDk4$4\">str</variable><variable id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"`%A#3-SRUN)5t35F$aV9\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"RfPU:m+rDA1XZ}7Mda.1\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"US`#,2:h@G$-A/xhuf@l\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"sY{7~=iL!K~#M^R=S[by\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6kfm%vA#G8_@J?`)x:m/\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace inputs {\r\n    const allKeys: { [name: string]: browserEvents.KeyButton } = {\r\n        \"A\": browserEvents.A,\r\n        \"B\": browserEvents.B,\r\n        \"C\": browserEvents.C,\r\n        \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E,\r\n        \"F\": browserEvents.F,\r\n        \"G\": browserEvents.G,\r\n        \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I,\r\n        \"J\": browserEvents.J,\r\n        \"K\": browserEvents.K,\r\n        \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M,\r\n        \"N\": browserEvents.N,\r\n        \"O\": browserEvents.O,\r\n        \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q,\r\n        \"R\": browserEvents.R,\r\n        \"S\": browserEvents.S,\r\n        \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U,\r\n        \"V\": browserEvents.V,\r\n        \"W\": browserEvents.W,\r\n        \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y,\r\n        \"Z\": browserEvents.Z,\r\n        \"0\": browserEvents.Zero,\r\n        \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two,\r\n        \"3\": browserEvents.Three,\r\n        \"4\": browserEvents.Four,\r\n        \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six,\r\n        \"7\": browserEvents.Seven,\r\n        \"8\": browserEvents.Eight,\r\n        \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift,\r\n        \"Ctrl\": browserEvents.Control,\r\n        \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta,\r\n        \"Enter\": browserEvents.Enter,\r\n        \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock,\r\n        \"Space\": browserEvents.Space,\r\n        \"Backspace\": browserEvents.End,\r\n        \"ArrowUp\": browserEvents.ArrowUp,\r\n        \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft,\r\n        \"ArrowRight\": browserEvents.ArrowRight,\r\n        \"/\": browserEvents.ForwardSlash,\r\n        \"\\\\\": browserEvents.BackSlash,\r\n        \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period,\r\n        \"[\": browserEvents.OpenBracket,\r\n        \"]\": browserEvents.CloseBracket,\r\n        \"=\": browserEvents.Equals,\r\n        \";\": browserEvents.SemiColon,\r\n        \"-\": browserEvents.Hyphen,\r\n        \"`\": browserEvents.BackTick,\r\n        \"'\": browserEvents.Apostrophe,\r\n\r\n        // Add more keys if needed\r\n    }\r\n\r\n    let previousKeyStates: { [key: string]: boolean } = {}, typedString: string = \"\", cursorPosition: number = 0;\r\n    let history: string[] = [\"\"];\r\n    let historyIndex: number = 0;\r\n    const MAX_HISTORY = 99;\r\n    let keyBuffer: string[] = [];\r\n    const KEY_BUFFER_TIMEOUT = 100;\r\n    let selectionStart: number = 0;\r\n    let selectionEnd: number = 0;\r\n    let hasSelection: boolean = false;\r\n    // Key repeat settings \r\n    const KEY_REPEAT_DELAY = 700; // Initial delay in ms before key repeat starts\r\n    const KEY_REPEAT_RATE = 50;   // Interval in ms between repeated keypresses\r\n    let keyRepeatTimers: { [key: string]: number } = {}; // Store timer IDs for key repeat\r\n    let repeatingKeys: { [key: string]: boolean } = {}; // Track which keys are repeating\r\n\r\n    function initKeyStates() {\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            previousKeyStates[keyNames[i]] = false;\r\n            repeatingKeys[keyNames[i]] = false;\r\n        }\r\n    }\r\n    initKeyStates();\r\n    export function currentKeys(): string[] {\r\n        const pressed: string[] = [];\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const name = keyNames[i];\r\n            if (allKeys[name].isPressed()) {\r\n                pressed.push(name);\r\n            }\r\n        }\r\n        const modifierPriority = [\"Ctrl\", \"Alt\", \"Shift\", \"Meta\"];\r\n        pressed.sort((a, b) => {\r\n            const ai = modifierPriority.indexOf(a);\r\n            const bi = modifierPriority.indexOf(b);\r\n            if (ai !== -1 && bi !== -1) return ai - bi;\r\n            if (ai !== -1) return -1;\r\n            if (bi !== -1) return 1;\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0;\r\n        });\r\n\r\n        return pressed;\r\n    }\r\n    export function newlyPressedKeys(): string[] {\r\n        const currentPressed = currentKeys();\r\n        const newlyPressed: string[] = [];\r\n        for (let i = 0; i < currentPressed.length; i++) {\r\n            const key = currentPressed[i];\r\n            if (!previousKeyStates[key]) {\r\n                newlyPressed.push(key);\r\n                previousKeyStates[key] = true;\r\n                if (!isModifierKey(key)) {\r\n                    startKeyRepeat(key);\r\n                }\r\n            }\r\n        }\r\n        const keyNames = Object.keys(allKeys);\r\n        for (let i = 0; i < keyNames.length; i++) {\r\n            const key = keyNames[i];\r\n            if (currentPressed.indexOf(key) == -1 && previousKeyStates[key]) {\r\n                previousKeyStates[key] = false;\r\n                stopKeyRepeat(key);\r\n            }\r\n        }\r\n        return newlyPressed;\r\n    }\r\n\r\n    function isModifierKey(key: string): boolean {\r\n        return [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"].indexOf(key) !== -1;\r\n    }\r\n\r\n    function startKeyRepeat(key: string) {\r\n        stopKeyRepeat(key);\r\n        keyRepeatTimers[key] = setTimeout(() => {\r\n            repeatingKeys[key] = true;\r\n            keyRepeatTimers[key] = setInterval(() => {\r\n                if (allKeys[key].isPressed()) {\r\n                    const char = keyToChar(key);\r\n                    if (char) {\r\n                        keyBuffer.push(char);\r\n                        flushKeyBuffer();\r\n                    } else if (key === \"Backspace\") {\r\n                        if (hasSelection) {\r\n                            deleteSelection();\r\n                        } else if (typedString.length > 0) {\r\n                            typedString = typedString.substr(0, typedString.length - 1);\r\n                            cursorPosition = typedString.length;\r\n                            saveToHistory();\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopKeyRepeat(key);\r\n                }\r\n            }, KEY_REPEAT_RATE);\r\n\r\n        }, KEY_REPEAT_DELAY);\r\n    }\r\n\r\n    function stopKeyRepeat(key: string) {\r\n        if (keyRepeatTimers[key]) {\r\n            clearTimeout(keyRepeatTimers[key]);\r\n            clearInterval(keyRepeatTimers[key]);\r\n            keyRepeatTimers[key] = 0;\r\n            repeatingKeys[key] = false;\r\n        }\r\n    }\r\n\r\n    function checkKeyCombination(keys: string[], combo: string[]): boolean {\r\n        if (keys.length !== combo.length) return false;\r\n        for (let i = 0; i < combo.length; i++) {\r\n            if (keys.indexOf(combo[i]) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function saveToHistory() {\r\n        if (history[historyIndex] !== typedString) {\r\n            if (historyIndex < history.length - 1) {\r\n                history = history.slice(0, historyIndex + 1);\r\n            }\r\n            history.push(typedString);\r\n            historyIndex = history.length - 1;\r\n            if (history.length > MAX_HISTORY) {\r\n                history.shift();\r\n                historyIndex--;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function processKeyBuffer() {\r\n        const currentPressed = currentKeys();\r\n        const newKeys = newlyPressedKeys();\r\n        if ((newKeys.length | currentPressed.length) === 0) return;\r\n        if (currentPressed.indexOf(\"Ctrl\") !== -1) {\r\n            if (newKeys.indexOf(\"Z\") !== -1) {\r\n                undo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"Y\") !== -1) {\r\n                redo();\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"A\") !== -1) {\r\n                selectAll();\r\n                return;\r\n            }\r\n            // TODO: implement clipboard\r\n            if (newKeys.indexOf(\"X\") !== -1) {\r\n                // Would cut to clipboard\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"C\") !== -1) {\r\n                // Would copy to clipboard\r\n                return;\r\n            }\r\n            if (newKeys.indexOf(\"V\") !== -1) {\r\n                // Would paste from clipboard\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (newKeys.indexOf(\"Backspace\") !== -1) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            } else {\r\n                if (typedString.length > 0) {\r\n                    typedString = typedString.substr(0, typedString.length - 1);\r\n                    cursorPosition = typedString.length;\r\n                }\r\n            }\r\n            saveToHistory();\r\n            return;\r\n        }\r\n        const modifiers = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n        const nonModifiers = newKeys.filter(k => (modifiers.indexOf(k) == -1));\r\n\r\n        if (nonModifiers.length === 0) return;\r\n        if (hasSelection) {\r\n            deleteSelection();\r\n        }\r\n        for (let i = 0; i < nonModifiers.length; i++) {\r\n            let key = nonModifiers[i];\r\n            const char = keyToChar(key);\r\n            if (char) {\r\n                keyBuffer.push(char);\r\n                setTimeout(flushKeyBuffer, KEY_BUFFER_TIMEOUT);\r\n            }\r\n        }\r\n    }\r\n\r\n    export function flushKeyBuffer() {\r\n        if (keyBuffer.length > 0) {\r\n            typedString += keyBuffer.join('');\r\n            cursorPosition = typedString.length;\r\n\r\n            keyBuffer = [];\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    export function keyToChar(key: string): string {\r\n        if (key === \"Space\") return \" \";\r\n        if (key === \"Enter\") return \"\\n\";\r\n        if (key === \"Tab\") return \"\\t\";\r\n        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") {\r\n            return \"\";\r\n        }\r\n        const shiftPressed = previousKeyStates[\"Shift\"];\r\n        if (key.length === 1 && key >= \"A\" && key <= \"Z\") {\r\n            return shiftPressed ? key : key.toLowerCase();\r\n        }\r\n        if (key.length === 1 && key >= \"0\" && key <= \"9\") {\r\n            if (shiftPressed) {\r\n                const shiftNumberMap: { [key: string]: string } = {\r\n                    \"1\": \"!\",\r\n                    \"2\": \"@\",\r\n                    \"3\": \"#\",\r\n                    \"4\": \"$\",\r\n                    \"5\": \"%\",\r\n                    \"6\": \"\",\r\n                    \"7\": \"&\",\r\n                    \"8\": \"*\",\r\n                    \"9\": \"(\",\r\n                    \"0\": \")\"\r\n                };\r\n                return shiftNumberMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        // Handle punctuation and symbols\r\n        if ([\",\", \".\", \"/\", \"\\\\\", \";\", \"'\", \"[\", \"]\", \"-\", \"=\", \"`\"].indexOf(key) !== -1) {\r\n            if (shiftPressed) {\r\n                const shiftSymbolMap: { [key: string]: string } = {\r\n                    \",\": \"<\",\r\n                    \".\": \">\",\r\n                    \"/\": \"?\",   // Funny story: when Shift+6 was pressed, it somehow sayed i was pressing '/' instead of 'shift+6'\r\n                                // So while adding the other keys to the symbol map, I figured—why not try mapping '/' to '?'...\r\n                                // And it actually worked! Total meme behavior, but hey—it works 🤷‍♂️😂\r\n                    \"\\\\\": \"|\",\r\n                    \";\": \":\",\r\n                    \"'\": \"\\\"\",\r\n                    \"[\": \"{\",\r\n                    \"]\": \"}\",\r\n                    \"-\": \"_\",\r\n                    \"=\": \"+\",\r\n                    \"`\": \"~\"\r\n                };\r\n                return shiftSymbolMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    export function getTypedString(): string {\r\n        return typedString;\r\n    }\r\n\r\n    /**\r\n     * Clears the typed string and resets cursor and selection.\r\n     */\r\n    //% block=\"clear typed string\"\r\n    //% group=\"Text\"\r\n    //% weight=99\r\n    export function clearTypedString() {\r\n        typedString = \"\";\r\n        cursorPosition = 0;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Selects all the text.\r\n     */\r\n    //% block=\"select all text\"\r\n    //% group=\"Text\"\r\n    //% weight=98\r\n    export function selectAll() {\r\n        if (typedString.length > 0) {\r\n            selectionStart = 0;\r\n            selectionEnd = typedString.length;\r\n            hasSelection = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the currently selected text.\r\n     */\r\n    //% block=\"delete selection\"\r\n    //% group=\"Text\"\r\n    //% weight=97\r\n    export function deleteSelection() {\r\n        if (hasSelection) {\r\n            const start = Math.min(selectionStart, selectionEnd);\r\n            const end = Math.max(selectionStart, selectionEnd);\r\n\r\n            typedString = typedString.substr(0, start) + typedString.substr(end);\r\n            cursorPosition = start;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undoes the last change.\r\n     */\r\n    //% block=\"undo\"\r\n    //% group=\"History\"\r\n    //% weight=96\r\n    export function undo() {\r\n        if (historyIndex > 0) {\r\n            historyIndex--;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redoes the last undone change.\r\n     */\r\n    //% block=\"redo\"\r\n    //% group=\"History\"\r\n    //% weight=95\r\n    export function redo() {\r\n        if (historyIndex < history.length - 1) {\r\n            historyIndex++;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Converts a keybind array to a string representation.\r\n     * For example: `[\"Shift\", \"A\"]` becomes `\"A\"`, and `[\"Ctrl\", \"S\"]` becomes `\"Ctrl+S\"`.\r\n     * \r\n     * @param keybind The array of keybind components (e.g. [\"Ctrl\", \"S\"]).\r\n     * @returns The formatted string version of the keybind.\r\n     */\r\n    //% block=\"convert keybind %keybind\"\r\n    //% group=\"Debug\"\r\n    //% weight=89\r\n    export function convertKeybind(keybind: string[]): string {\r\n        if (keybind.length == 0) return \"\";\r\n\r\n        if (keybind.length == 1 && keybind[0].length == 1) {\r\n            return keybind[0].toLowerCase();\r\n        } else if (keybind.length == 2 && keybind[0] == \"Shift\") {\r\n            return keybind[1];\r\n        }\r\n        return keybind.join(\"+\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns debug information including the current text, cursor position,\r\n     * history index, and selection range if active.\r\n     */\r\n    //% block=\"get debug info\"\r\n    //% group=\"Debug\"\r\n    //% weight=90\r\n    export function getDebugInfo(): string {\r\n        let info = \"\";\r\n        info += `Text: \"${typedString}\"\\n`;\r\n        info += `Cursor: ${cursorPosition}\\n`;\r\n        info += `History: ${historyIndex + 1}/${history.length}\\n`;\r\n\r\n        if (hasSelection) {\r\n            info += `Selection: ${selectionStart}-${selectionEnd}`;\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n\r\n    /**\r\n      * Start processing input and run a callback when the typed string updates.\r\n      * @param callback a function that receives the current typed string\r\n      * @param _null a variable that does nothing\r\n      */\r\n    //% blockId=inputs_start_key_logging \r\n    //% block=\"on typed key updates %typed\"\r\n    //% typed.defl=str\r\n    //% typed.shadow=variables_get\r\n    export function startKeyLogging(_null: any, callback: (typed: string) => void): void {\r\n        game.onUpdate(inputs.processKeyBuffer);\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = inputs.getTypedString();\r\n            callback(typed);\r\n\r\n            const keys = inputs.currentKeys();\r\n            if (keys.length) {\r\n                console.logValue(\"Active Keys\", inputs.convertKeybind(keys));\r\n            }\r\n\r\n            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", inputs.getDebugInfo());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a menu button handler to clear the typed string\r\n     */\r\n    //% blockId=inputs_enable_clear_button \r\n    //% block=\"enable clear button\"\r\n    export function enableClearButton(): void {\r\n        controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n            inputs.clearTypedString();\r\n            console.logValue(\"Typed\", \"Cleared\");\r\n        });\r\n    }\r\n}\r\n","test.ts":"// Tests are here\r\n\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\",\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1744485399215,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"*i5KB*0r-#ORXO14U*g4\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"+QQ`[swoZ!V@(h9/:7y-\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"tN.$_%pK|1H*-]+oCcpK\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"e3n5nd/G*/z{eH]5!w1I\">Enemy</variable><variable id=\"V26nNE38QL$jrIF,{~T8\">mySprite</variable><variable id=\"jNH:PJG8=.6*RQtAL4|*\">str</variable><variable id=\"k^_q?DasJ1QvCZzr^U?(\">mySprite2</variable><variable id=\"i|d/=E^_Jp!IW.%ktnNj\">list</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\"><mutation items=\"1\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"text\"><field name=\"TEXT\"></field></block></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"60\" y=\"203\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"browserEvents_key_isPressed\"><field name=\"this\">browserEvents.Enter</field></block></value><statement name=\"DO0\"><block type=\"array_push\"><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i|d/=E^_Jp!IW.%ktnNj\">list</field></block></value><value name=\"value\"><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><next><block type=\"inputs_clearTypedString\"></block></next></block></statement><next><block type=\"spritesaytext\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"this\"><block type=\"variables_get\"><field name=\"VAR\" id=\"V26nNE38QL$jrIF,{~T8\">mySprite</field></block></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">:)</field></shadow><block type=\"variables_get_reporter\"><field name=\"VAR\" id=\"jNH:PJG8=.6*RQtAL4|*\">str</field></block></value><value name=\"timeOnScreen\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><value name=\"animated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace inputs {\r\n    const allKeys: { [name: string]: browserEvents.KeyButton } = {\r\n        \"A\": browserEvents.A, \"B\": browserEvents.B, \"C\": browserEvents.C, \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E, \"F\": browserEvents.F, \"G\": browserEvents.G, \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I, \"J\": browserEvents.J, \"K\": browserEvents.K, \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M, \"N\": browserEvents.N, \"O\": browserEvents.O, \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q, \"R\": browserEvents.R, \"S\": browserEvents.S, \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U, \"V\": browserEvents.V, \"W\": browserEvents.W, \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y, \"Z\": browserEvents.Z, \"0\": browserEvents.Zero, \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two, \"3\": browserEvents.Three, \"4\": browserEvents.Four, \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six, \"7\": browserEvents.Seven, \"8\": browserEvents.Eight, \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift, \"Ctrl\": browserEvents.Control, \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta, \"Enter\": browserEvents.Enter, \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock, \"Space\": browserEvents.Space, \"Backspace\": browserEvents.End,\r\n        \"ArrowUp\": browserEvents.ArrowUp, \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft, \"ArrowRight\": browserEvents.ArrowRight,\r\n        \"/\": browserEvents.ForwardSlash, \"\\\\\": browserEvents.BackSlash, \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period, \"[\": browserEvents.OpenBracket, \"]\": browserEvents.CloseBracket,\r\n        \"=\": browserEvents.Equals, \";\": browserEvents.SemiColon, \"-\": browserEvents.Hyphen,\r\n        \"`\": browserEvents.BackTick, \"'\": browserEvents.Apostrophe\r\n    }\r\n\r\n    let previousKeyStates: { [key: string]: boolean } = {}, typedString = \"\", cursorPosition = 0;\r\n    let history = [\"\"], historyIndex = 0, keyBuffer: string[] = [];\r\n    let selectionStart = 0, selectionEnd = 0, hasSelection = false;\r\n    const MAX_HISTORY = 99, KEY_BUFFER_TIMEOUT = 100;\r\n    const KEY_REPEAT_DELAY = 450, KEY_REPEAT_RATE = 50;\r\n    let keyRepeatTimers: { [key: string]: number } = {}, repeatingKeys: { [key: string]: boolean } = {};\r\n    const MODIFIERS = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n\r\n    (function initKeyStates() {\r\n        Object.keys(allKeys).forEach(key => {\r\n            previousKeyStates[key] = false;\r\n            repeatingKeys[key] = false;\r\n        });\r\n    })();\r\n\r\n    export function currentKeys(): string[] {\r\n        const pressed = Object.keys(allKeys).filter(name => allKeys[name].isPressed());\r\n        const modifierPriority = MODIFIERS;\r\n\r\n        return pressed.sort((a, b) => {\r\n            const ai = modifierPriority.indexOf(a);\r\n            const bi = modifierPriority.indexOf(b);\r\n            if (ai !== -1 && bi !== -1) return ai - bi;\r\n            if (ai !== -1) return -1;\r\n            if (bi !== -1) return 1;\r\n            return a < b ? -1 : a > b ? 1 : 0;\r\n        });\r\n    }\r\n\r\n    export function newlyPressedKeys(): string[] {\r\n        const currentPressed = currentKeys();\r\n        const newlyPressed: string[] = [];\r\n\r\n        for (const key of currentPressed) {\r\n            if (!previousKeyStates[key]) {\r\n                newlyPressed.push(key);\r\n                previousKeyStates[key] = true;\r\n                if (MODIFIERS.indexOf(key) === -1) startKeyRepeat(key);\r\n            }\r\n        }\r\n\r\n        Object.keys(allKeys).forEach(key => {\r\n            if (currentPressed.indexOf(key) === -1 && previousKeyStates[key]) {\r\n                previousKeyStates[key] = false;\r\n                stopKeyRepeat(key);\r\n            }\r\n        });\r\n\r\n        return newlyPressed;\r\n    }\r\n\r\n    function startKeyRepeat(key: string) {\r\n        stopKeyRepeat(key);\r\n        keyRepeatTimers[key] = setTimeout(() => {\r\n            repeatingKeys[key] = true;\r\n            keyRepeatTimers[key] = setInterval(() => {\r\n                if (allKeys[key].isPressed()) {\r\n                    const char = keyToChar(key);\r\n                    if (char) {\r\n                        keyBuffer.push(char);\r\n                        flushKeyBuffer();\r\n                    } else if (key === \"Backspace\") {\r\n                        if (hasSelection) {\r\n                            deleteSelection();\r\n                        } else if (typedString.length > 0) {\r\n                            typedString = typedString.slice(0, -1);\r\n                            cursorPosition = typedString.length;\r\n                            saveToHistory();\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopKeyRepeat(key);\r\n                }\r\n            }, KEY_REPEAT_RATE);\r\n        }, KEY_REPEAT_DELAY);\r\n    }\r\n\r\n    function stopKeyRepeat(key: string) {\r\n        if (keyRepeatTimers[key]) {\r\n            clearTimeout(keyRepeatTimers[key]);\r\n            clearInterval(keyRepeatTimers[key]);\r\n            keyRepeatTimers[key] = 0;\r\n            repeatingKeys[key] = false;\r\n        }\r\n    }\r\n\r\n    function saveToHistory() {\r\n        if (history[historyIndex] !== typedString) {\r\n            if (historyIndex < history.length - 1) {\r\n                history = history.slice(0, historyIndex + 1);\r\n            }\r\n            history.push(typedString);\r\n            historyIndex = history.length - 1;\r\n            if (history.length > MAX_HISTORY) {\r\n                history.shift();\r\n                historyIndex--;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function processKeyBuffer() {\r\n        const currentPressed = currentKeys();\r\n        const newKeys = newlyPressedKeys();\r\n        if ((newKeys.length | currentPressed.length) === 0) return;\r\n\r\n        if (currentPressed.indexOf(\"Ctrl\") !== -1) {\r\n            if (newKeys.indexOf(\"Z\") !== -1) { undo(); return; }\r\n            if (newKeys.indexOf(\"Y\") !== -1) { redo(); return; }\r\n            if (newKeys.indexOf(\"A\") !== -1) { selectAll(); return; }\r\n            if ([\"X\", \"C\", \"V\"].some(k => newKeys.indexOf(k) !== -1)) return;\r\n        }\r\n\r\n        if (newKeys.indexOf(\"Backspace\") !== -1) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            } else if (typedString.length > 0) {\r\n                typedString = typedString.slice(0, -1);\r\n                cursorPosition = typedString.length;\r\n            }\r\n            saveToHistory();\r\n            return;\r\n        }\r\n\r\n        const nonModifiers = newKeys.filter(k => MODIFIERS.indexOf(k) === -1);\r\n        if (nonModifiers.length === 0) return;\r\n\r\n        if (hasSelection) deleteSelection();\r\n\r\n        nonModifiers.forEach(key => {\r\n            const char = keyToChar(key);\r\n            if (char) {\r\n                keyBuffer.push(char);\r\n                setTimeout(flushKeyBuffer, KEY_BUFFER_TIMEOUT);\r\n            }\r\n        });\r\n    }\r\n\r\n    export function flushKeyBuffer() {\r\n        if (keyBuffer.length > 0) {\r\n            typedString += keyBuffer.join('');\r\n            cursorPosition = typedString.length;\r\n            keyBuffer = [];\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    export function keyToChar(key: string): string {\r\n        if (key === \"Space\") return \" \";\r\n        if (key === \"Enter\") return \"\\n\";\r\n        if (key === \"Tab\") return \"\\t\";\r\n        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") {\r\n            return \"\";\r\n        }\r\n        const shiftPressed = previousKeyStates[\"Shift\"];\r\n        if (key.length === 1 && key >= \"A\" && key <= \"Z\") {\r\n            return shiftPressed ? key : key.toLowerCase();\r\n        }\r\n        if (key.length === 1 && key >= \"0\" && key <= \"9\") {\r\n            if (shiftPressed) {\r\n                const shiftNumberMap: { [key: string]: string } = {\r\n                    \"1\": \"!\",\r\n                    \"2\": \"@\",\r\n                    \"3\": \"#\",\r\n                    \"4\": \"$\",\r\n                    \"5\": \"%\",\r\n                    \"6\": \"\",\r\n                    \"7\": \"&\",\r\n                    \"8\": \"*\",\r\n                    \"9\": \"(\",\r\n                    \"0\": \")\"\r\n                };\r\n                return shiftNumberMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        // Handle punctuation and symbols\r\n        if ([\",\", \".\", \"/\", \"\\\\\", \";\", \"'\", \"[\", \"]\", \"-\", \"=\", \"`\"].indexOf(key) !== -1) {\r\n            if (shiftPressed) {\r\n                const shiftSymbolMap: { [key: string]: string } = {\r\n                    \",\": \"<\",\r\n                    \".\": \">\",\r\n                    \"/\": \"?\",   // Funny story: when Shift+6 was pressed, it somehow sayed i was pressing '/' instead of 'shift+6'\r\n                                // So while adding the other keys to the symbol map, I figured—why not try mapping '/' to '?'...\r\n                                // And it actually worked! Total meme behavior, but hey—it works 🤷‍♂️😂\r\n                    \"\\\\\": \"|\",\r\n                    \";\": \":\",\r\n                    \"'\": \"\\\"\",\r\n                    \"[\": \"{\",\r\n                    \"]\": \"}\",\r\n                    \"-\": \"_\",\r\n                    \"=\": \"+\",\r\n                    \"`\": \"~\"\r\n                };\r\n                return shiftSymbolMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    export function getTypedString(): string {\r\n        return typedString;\r\n    }\r\n\r\n    /**\r\n     * Clears the typed string and resets cursor and selection.\r\n     */\r\n    //% block=\"clear typed string\"\r\n    //% group=\"Text\"\r\n    //% weight=99\r\n    export function clearTypedString() {\r\n        typedString = \"\";\r\n        cursorPosition = 0;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Selects all the text.\r\n     */\r\n    //% block=\"select all text\"\r\n    //% group=\"Text\"\r\n    //% weight=98\r\n    export function selectAll() {\r\n        if (typedString.length > 0) {\r\n            selectionStart = 0;\r\n            selectionEnd = typedString.length;\r\n            hasSelection = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the currently selected text.\r\n     */\r\n    //% block=\"delete selection\"\r\n    //% group=\"Text\"\r\n    //% weight=97\r\n    export function deleteSelection() {\r\n        if (hasSelection) {\r\n            const start = Math.min(selectionStart, selectionEnd);\r\n            const end = Math.max(selectionStart, selectionEnd);\r\n            typedString = typedString.slice(0, start) + typedString.slice(end);\r\n            cursorPosition = start;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undoes the last change.\r\n     */\r\n    //% block=\"undo\"\r\n    //% group=\"History\"\r\n    //% weight=96\r\n    export function undo() {\r\n        if (historyIndex > 0) {\r\n            historyIndex--;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redoes the last undone change.\r\n     */\r\n    //% block=\"redo\"\r\n    //% group=\"History\"\r\n    //% weight=95\r\n    export function redo() {\r\n        if (historyIndex < history.length - 1) {\r\n            historyIndex++;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a keybind array to a string representation.\r\n     * For example: `[\"Shift\", \"A\"]` becomes `\"A\"`, and `[\"Ctrl\", \"S\"]` becomes `\"Ctrl+S\"`.\r\n     * \r\n     * @param keybind The array of keybind components (e.g. [\"Ctrl\", \"S\"]).\r\n     * @returns The formatted string version of the keybind.\r\n     */\r\n    //% block=\"convert keybind %keybind\"\r\n    //% group=\"Debug\"\r\n    //% weight=89\r\n    export function convertKeybind(keybind: string[]): string {\r\n        if (keybind.length === 0) return \"\";\r\n        if (keybind.length === 1 && keybind[0].length === 1) return keybind[0].toLowerCase();\r\n        if (keybind.length === 2 && keybind[0] === \"Shift\") return keybind[1];\r\n        return keybind.join(\"+\");\r\n    }\r\n\r\n    /**\r\n     * Returns debug information including the current text, cursor position,\r\n     * history index, and selection range if active.\r\n     */\r\n    //% block=\"get debug info\"\r\n    //% group=\"Debug\"\r\n    //% weight=90\r\n    export function getDebugInfo(): string {\r\n        let info = `Text: \"${typedString}\"\\nCursor: ${cursorPosition}\\nHistory: ${historyIndex + 1}/${history.length}`;\r\n        if (hasSelection) info += `\\nSelection: ${selectionStart}-${selectionEnd}`;\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * Starts processing input and runs a callback when the typed string updates.\r\n     * @param handler a function that receives the current typed string.\r\n     */\r\n    //% blockId=inputs_start_key_logging \r\n    //% block=\"on typed key updates $str\"\r\n    //% str.defl=str\r\n    //% str.shadow=variable_get\r\n    //% draggableParameters\r\n    export function startKeyLogging(handler: (str: string) => void): void {\r\n        game.onUpdate(processKeyBuffer);\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = getTypedString();\r\n            handler(typed);\r\n\r\n            const keys = currentKeys();\r\n            if (keys.length) console.logValue(\"Active Keys\", convertKeybind(keys));\r\n\r\n            console.logValue(\"Typed\", typed);\r\n            console.logValue(\"Info\", getDebugInfo());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a menu button handler to clear the typed string.\r\n     */\r\n    //% blockId=inputs_enable_clear_button \r\n    //% block=\"enable clear button\"\r\n    export function enableClearButton(): void {\r\n        controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n            clearTypedString();\r\n            console.logValue(\"Typed\", \"Cleared\");\r\n        });\r\n    }\r\n}","test.ts":"// Tests are here\r\n\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\",\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1745886062764,"editorVersion":"2.0.53","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"Tpf%(4I9{j3TA,TH.b*-\">str</variable><variable id=\"B~0B53_L2z1.c8y2n]3c\">mySprite</variable><variable id=\"~H)KN-sZdK%1%3HNmd0R\">list</variable><variable type=\"KIND_SpriteKind\" id=\"]%=UOVJ$HcPwm?3IeraG\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"l@cIF,-SW014{@::MBxk\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"$,dF8wm:GANWFrWUK][!\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"FyN.pRC4u`XiqWv+$*FK\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"34\" y=\"64\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"~H)KN-sZdK%1%3HNmd0R\">list</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\"><mutation items=\"1\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"B~0B53_L2z1.c8y2n]3c\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></next></block></statement></block><block type=\"inputs_start_key_logging\" x=\"250\" y=\"353\"><value name=\"HANDLER_DRAG_PARAM_str\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"Tpf%(4I9{j3TA,TH.b*-\">str</field></block></value></block></xml>","main.ts":"inputs.startKeyLogging(function (str) {\n\t\n})\nlet list = [\"\"]\nlet mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\n","README.md":" ","assets.json":"","MoreBrowserEvents.ts":"namespace inputs {\r\n\r\n    const allKeys: { [name: string]: browserEvents.KeyButton } = {\r\n        \"A\": browserEvents.A, \"B\": browserEvents.B, \"C\": browserEvents.C, \"D\": browserEvents.D,\r\n        \"E\": browserEvents.E, \"F\": browserEvents.F, \"G\": browserEvents.G, \"H\": browserEvents.H,\r\n        \"I\": browserEvents.I, \"J\": browserEvents.J, \"K\": browserEvents.K, \"L\": browserEvents.L,\r\n        \"M\": browserEvents.M, \"N\": browserEvents.N, \"O\": browserEvents.O, \"P\": browserEvents.P,\r\n        \"Q\": browserEvents.Q, \"R\": browserEvents.R, \"S\": browserEvents.S, \"T\": browserEvents.T,\r\n        \"U\": browserEvents.U, \"V\": browserEvents.V, \"W\": browserEvents.W, \"X\": browserEvents.X,\r\n        \"Y\": browserEvents.Y, \"Z\": browserEvents.Z, \"0\": browserEvents.Zero, \"1\": browserEvents.One,\r\n        \"2\": browserEvents.Two, \"3\": browserEvents.Three, \"4\": browserEvents.Four, \"5\": browserEvents.Five,\r\n        \"6\": browserEvents.Six, \"7\": browserEvents.Seven, \"8\": browserEvents.Eight, \"9\": browserEvents.Nine,\r\n        \"Shift\": browserEvents.Shift, \"Ctrl\": browserEvents.Control, \"Alt\": browserEvents.Alt,\r\n        \"Meta\": browserEvents.Meta, \"Enter\": browserEvents.Enter, \"Tab\": browserEvents.Tab,\r\n        \"CapsLock\": browserEvents.CapsLock, \"Space\": browserEvents.Space, \"Backspace\": browserEvents.End,\r\n        \"ArrowUp\": browserEvents.ArrowUp, \"ArrowDown\": browserEvents.ArrowDown,\r\n        \"ArrowLeft\": browserEvents.ArrowLeft, \"ArrowRight\": browserEvents.ArrowRight,\r\n        \"/\": browserEvents.ForwardSlash, \"\\\\\": browserEvents.BackSlash, \",\": browserEvents.Comma,\r\n        \".\": browserEvents.Period, \"[\": browserEvents.OpenBracket, \"]\": browserEvents.CloseBracket,\r\n        \"=\": browserEvents.Equals, \";\": browserEvents.SemiColon, \"-\": browserEvents.Hyphen,\r\n        \"`\": browserEvents.BackTick, \"'\": browserEvents.Apostrophe\r\n    }\r\n\r\n    let previousKeyStates: { [key: string]: boolean } = {}, typedString = \"\", cursorPosition = 0;\r\n    let history = [\"\"], historyIndex = 0, keyBuffer: string[] = [];\r\n    let selectionStart = 0, selectionEnd = 0, hasSelection = false;\r\n    const MAX_HISTORY = 99, KEY_BUFFER_TIMEOUT = 100;\r\n    const KEY_REPEAT_DELAY = 450, KEY_REPEAT_RATE = 30;\r\n    let keyRepeatTimers: { [key: string]: number } = {}, repeatingKeys: { [key: string]: boolean } = {};\r\n    const MODIFIERS = [\"Shift\", \"Ctrl\", \"Alt\", \"Meta\"];\r\n\r\n    (function initKeyStates() {\r\n        Object.keys(allKeys).forEach(key => {\r\n            previousKeyStates[key] = false;\r\n            repeatingKeys[key] = false;\r\n        });\r\n    })();\r\n\r\n    export function currentKeys(): string[] {\r\n        const pressed = Object.keys(allKeys).filter(name => allKeys[name].isPressed());\r\n        const modifierPriority = MODIFIERS;\r\n\r\n        return pressed.sort((a, b) => {\r\n            const ai = modifierPriority.indexOf(a);\r\n            const bi = modifierPriority.indexOf(b);\r\n            if (ai !== -1 && bi !== -1) return ai - bi;\r\n            if (ai !== -1) return -1;\r\n            if (bi !== -1) return 1;\r\n            return a < b ? -1 : a > b ? 1 : 0;\r\n        });\r\n    }\r\n\r\n    export function newlyPressedKeys(): string[] {\r\n        const currentPressed = currentKeys();\r\n        const newlyPressed: string[] = [];\r\n\r\n        for (const key of currentPressed) {\r\n            if (!previousKeyStates[key]) {\r\n                newlyPressed.push(key);\r\n                previousKeyStates[key] = true;\r\n                if (MODIFIERS.indexOf(key) === -1) startKeyRepeat(key);\r\n            }\r\n        }\r\n\r\n        Object.keys(allKeys).forEach(key => {\r\n            if (currentPressed.indexOf(key) === -1 && previousKeyStates[key]) {\r\n                previousKeyStates[key] = false;\r\n                stopKeyRepeat(key);\r\n            }\r\n        });\r\n\r\n        return newlyPressed;\r\n    }\r\n\r\n    function startKeyRepeat(key: string) {\r\n        stopKeyRepeat(key);\r\n        keyRepeatTimers[key] = setTimeout(() => {\r\n            repeatingKeys[key] = true;\r\n            keyRepeatTimers[key] = setInterval(() => {\r\n                if (allKeys[key].isPressed()) {\r\n                    const char = keyToChar(key);\r\n                    if (char) {\r\n                        keyBuffer.push(char);\r\n                        flushKeyBuffer();\r\n                    } else if (key === \"Backspace\") {\r\n                        if (hasSelection) {\r\n                            deleteSelection();\r\n                        } else if (typedString.length > 0) {\r\n                            typedString = typedString.slice(0, -1);\r\n                            cursorPosition = typedString.length;\r\n                            saveToHistory();\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopKeyRepeat(key);\r\n                }\r\n            }, KEY_REPEAT_RATE);\r\n        }, KEY_REPEAT_DELAY);\r\n    }\r\n\r\n    function stopKeyRepeat(key: string) {\r\n        if (keyRepeatTimers[key]) {\r\n            clearTimeout(keyRepeatTimers[key]);\r\n            clearInterval(keyRepeatTimers[key]);\r\n            keyRepeatTimers[key] = 0;\r\n            repeatingKeys[key] = false;\r\n        }\r\n    }\r\n\r\n    function saveToHistory() {\r\n        if (history[historyIndex] !== typedString) {\r\n            if (historyIndex < history.length - 1) {\r\n                history = history.slice(0, historyIndex + 1);\r\n            }\r\n            history.push(typedString);\r\n            historyIndex = history.length - 1;\r\n            if (history.length > MAX_HISTORY) {\r\n                history.shift();\r\n                historyIndex--;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function processKeyBuffer() {\r\n        const currentPressed = currentKeys();\r\n        const newKeys = newlyPressedKeys();\r\n        if ((newKeys.length | currentPressed.length) === 0) return;\r\n\r\n        if (currentPressed.indexOf(\"Ctrl\") !== -1) {\r\n            if (newKeys.indexOf(\"Z\") !== -1) { undo(); return; }\r\n            if (newKeys.indexOf(\"Y\") !== -1) { redo(); return; }\r\n            if (newKeys.indexOf(\"A\") !== -1) { selectAll(); return; }\r\n            if ([\"X\", \"C\", \"V\"].some(k => newKeys.indexOf(k) !== -1)) return;\r\n        }\r\n\r\n        if (newKeys.indexOf(\"Backspace\") !== -1) {\r\n            if (hasSelection) {\r\n                deleteSelection();\r\n            } else if (typedString.length > 0) {\r\n                typedString = typedString.slice(0, -1);\r\n                cursorPosition = typedString.length;\r\n            }\r\n            saveToHistory();\r\n            return;\r\n        }\r\n\r\n        const nonModifiers = newKeys.filter(k => MODIFIERS.indexOf(k) === -1);\r\n        if (nonModifiers.length === 0) return;\r\n\r\n        if (hasSelection) deleteSelection();\r\n\r\n        nonModifiers.forEach(key => {\r\n            const char = keyToChar(key);\r\n            if (char) {\r\n                keyBuffer.push(char);\r\n                setTimeout(flushKeyBuffer, KEY_BUFFER_TIMEOUT);\r\n            }\r\n        });\r\n    }\r\n\r\n    export function flushKeyBuffer() {\r\n        if (keyBuffer.length > 0) {\r\n            typedString += keyBuffer.join('');\r\n            cursorPosition = typedString.length;\r\n            keyBuffer = [];\r\n            saveToHistory();\r\n        }\r\n    }\r\n\r\n    export function keyToChar(key: string): string {\r\n        if (key === \"Space\") return \" \";\r\n        if (key === \"Enter\") return \"\\n\";\r\n        if (key === \"Tab\") return \"\\t\";\r\n        if (key.slice(0, 4) == \"Arrow\" || key === \"Backspace\" || key === \"CapsLock\") {\r\n            return \"\";\r\n        }\r\n        const shiftPressed = previousKeyStates[\"Shift\"];\r\n        if (key.length === 1 && key >= \"A\" && key <= \"Z\") {\r\n            return shiftPressed ? key : key.toLowerCase();\r\n        }\r\n        if (key.length === 1 && key >= \"0\" && key <= \"9\") {\r\n            if (shiftPressed) {\r\n                const shiftNumberMap: { [key: string]: string } = {\r\n                    \"1\": \"!\",\r\n                    \"2\": \"@\",\r\n                    \"3\": \"#\",\r\n                    \"4\": \"$\",\r\n                    \"5\": \"%\",\r\n                    \"6\": \"\",\r\n                    \"7\": \"&\",\r\n                    \"8\": \"*\",\r\n                    \"9\": \"(\",\r\n                    \"0\": \")\"\r\n                };\r\n                return shiftNumberMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        // Handle punctuation and symbols\r\n        if ([\",\", \".\", \"/\", \"\\\\\", \";\", \"'\", \"[\", \"]\", \"-\", \"=\", \"`\"].indexOf(key) !== -1) {\r\n            if (shiftPressed) {\r\n                const shiftSymbolMap: { [key: string]: string } = {\r\n                    \",\": \"<\",\r\n                    \".\": \">\",\r\n                    \"/\": \"?\",   // Funny story: when Shift+6 was pressed, it somehow sayed i was pressing '/' instead of 'shift+6'\r\n                                // So while adding the other keys to the symbol map, I figured—why not try mapping '/' to '?'...\r\n                                // And it actually worked! Total meme behavior, but hey—it works 🤷‍♂️😂\r\n                    \"\\\\\": \"|\",\r\n                    \";\": \":\",\r\n                    \"'\": \"\\\"\",\r\n                    \"[\": \"{\",\r\n                    \"]\": \"}\",\r\n                    \"-\": \"_\",\r\n                    \"=\": \"+\",\r\n                    \"`\": \"~\"\r\n                };\r\n                return shiftSymbolMap[key] || key;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    export function getTypedString(): string {\r\n        return typedString;\r\n    }\r\n\r\n    /**\r\n     * Clears the typed string and resets cursor and selection.\r\n     */\r\n    //% block=\"clear typed string\"\r\n    //% group=\"Text\"\r\n    //% weight=99\r\n    export function clearTypedString() {\r\n        typedString = \"\";\r\n        cursorPosition = 0;\r\n        hasSelection = false;\r\n        saveToHistory();\r\n    }\r\n\r\n    /**\r\n     * Selects all the text.\r\n     */\r\n    //% block=\"select all text\"\r\n    //% group=\"Text\"\r\n    //% weight=98\r\n    export function selectAll() {\r\n        if (typedString.length > 0) {\r\n            selectionStart = 0;\r\n            selectionEnd = typedString.length;\r\n            hasSelection = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the currently selected text.\r\n     */\r\n    //% block=\"delete selection\"\r\n    //% group=\"Text\"\r\n    //% weight=97\r\n    export function deleteSelection() {\r\n        if (hasSelection) {\r\n            const start = Math.min(selectionStart, selectionEnd);\r\n            const end = Math.max(selectionStart, selectionEnd);\r\n            typedString = typedString.slice(0, start) + typedString.slice(end);\r\n            cursorPosition = start;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undoes the last change.\r\n     */\r\n    //% block=\"undo\"\r\n    //% group=\"History\"\r\n    //% weight=96\r\n    export function undo() {\r\n        if (historyIndex > 0) {\r\n            historyIndex--;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redoes the last undone change.\r\n     */\r\n    //% block=\"redo\"\r\n    //% group=\"History\"\r\n    //% weight=95\r\n    export function redo() {\r\n        if (historyIndex < history.length - 1) {\r\n            historyIndex++;\r\n            typedString = history[historyIndex];\r\n            cursorPosition = typedString.length;\r\n            hasSelection = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a keybind array to a string representation.\r\n     * For example: `[\"Shift\", \"A\"]` becomes `\"A\"`, and `[\"Ctrl\", \"S\"]` becomes `\"Ctrl+S\"`.\r\n     * \r\n     * @param keybind The array of keybind components (e.g. [\"Ctrl\", \"S\"]).\r\n     * @returns The formatted string version of the keybind.\r\n     */\r\n    //% block=\"convert keybind %keybind\"\r\n    //% group=\"Debug\"\r\n    //% weight=89\r\n    export function convertKeybind(keybind: string[]): string {\r\n        if (keybind.length === 0) return \"\";\r\n        if (keybind.length === 1 && keybind[0].length === 1) return keybind[0].toLowerCase();\r\n        if (keybind.length === 2 && keybind[0] === \"Shift\") return keybind[1];\r\n        return keybind.join(\"+\");\r\n    }\r\n\r\n    /**\r\n     * Returns debug information including the current text, cursor position,\r\n     * history index, and selection range if active.\r\n     */\r\n    //% block=\"get debug info\"\r\n    //% group=\"Debug\"\r\n    //% weight=90\r\n    export function getDebugInfo(): string {\r\n        let info = `Text: \"${typedString}\"\\nCursor: ${cursorPosition}\\nHistory: ${historyIndex + 1}/${history.length}`;\r\n        if (hasSelection) info += `\\nSelection: ${selectionStart}-${selectionEnd}`;\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * Starts processing input and runs a callback when the typed string updates.\r\n     * @param handler a function that receives the current typed string.\r\n     */\r\n    //% blockId=inputs_start_key_logging \r\n    //% block=\"on typed key updates $str\"\r\n    //% str.defl=str\r\n    //% str.shadow=variable_get\r\n    //% draggableParameters\r\n    export function startKeyLogging(handler: (str: string) => void): void {\r\n        game.onUpdate(processKeyBuffer);\r\n        game.onUpdateInterval(100, function () {\r\n            const typed = getTypedString();\r\n            handler(typed);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a menu button handler to clear the typed string.\r\n     */\r\n    //% blockId=inputs_enable_clear_button \r\n    //% block=\"enable clear button\"\r\n    export function enableClearButton(): void {\r\n        controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n            clearTypedString();\r\n        });\r\n    }\r\n}","test.ts":"// Tests are here\r\n\r\n// Process keys every frame\r\ngame.onUpdate(function () {\r\n    inputs.processKeyBuffer();\r\n});\r\n\r\n// Log the typed string every 100ms\r\ngame.onUpdateInterval(100, function () {\r\n    // Get current active keys for debugging\r\n    const currentKeys = inputs.currentKeys();\r\n\r\n    // Show the typed string\r\n    console.logValue(\"Typed\", inputs.getTypedString());\r\n\r\n    // Show debug info\r\n    console.logValue(\"Info\", inputs.getDebugInfo());\r\n\r\n    // Also show current keys for debugging\r\n    if (currentKeys.length > 0) {\r\n        console.logValue(\"Active Keys\", inputs.convertKeybind(currentKeys));\r\n    }\r\n});\r\n\r\n// Add a button to clear the typed string\r\ncontroller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\r\n    inputs.clearTypedString();\r\n    console.logValue(\"Typed\", \"Cleared\");\r\n});","pxt.json":"{\n    \"name\": \"live Keyboard\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"browser-events\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"MoreBrowserEvents.ts\",\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[{"id":"81501-64871-08864-08807","timestamp":1744222158670}],"lastSaveTime":1745886062814}